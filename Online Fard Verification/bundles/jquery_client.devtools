/* Minification failed. Returning unminified contents.
(2681,24-27): run-time error JS1282: Conditional compilation expression not supported. Comment ignored: @if
(2682,26-29): run-time error JS1282: Conditional compilation expression not supported. Comment ignored: @if
 */
var App = (function() {
    var elements;
    var init = function() {
        elements = {
            $logOut: $("#logOut")
        };
        Common.introduceSerializeObject();

        //Libs' Defaults -- Starts
       // Common.setValidationDefaults();
        Common.setToastrDefaults();
        Common.setjqGridDefaults();
       // Common.setBootstrapSwitchDefaults();
       // Common.setjQueryAjaxDefauts();
      //  Common.setCultureDefauts();
        //Common.setSelect2Defaults();
        //Libs' Defaults -- Ends

        //Global Event Handlers -- Starts
        App.bindPageEvents();
       // App.bindBootstrapModalEvents();
        //Global Event Handlers -- Ends

        //Global UI Function Calls -- Starts
      //  UIManager.loadMenu();
        //UIManager.loadCustomScrollbar();
        //UIManager.initFilterContainer();
        //UIManager.initFilterContainerOnDemandLoad();
        //UIManager.loadDateTimePicker($(".date-picker"));
       //UIManager.loadSearchableDropdown({ $element: $(".searchable-dropdown") });

        //Global UI Function Calls -- Ends
    };
    var initBootstrapModal = function($modal) {
       // Common.refreshUnobtrusiveValidation($modal);
        UIManager.loadPopover($modal.find(".popover-element"));
        UIManager.loadDateTimePicker($modal.find(".date-picker"));
        UIManager.loadSearchableDropdown({ $element: $modal.find(".searchable-dropdown") });
    };
    var bindBootstrapModalEvents = function() {
        $(window)
            .on("shown.bs.modal",
                function(e) {
                    var $modal = $(e.target);
                    App.initBootstrapModal($modal);
                });
    };
    var bindPageEvents = function() {
        elements.$logOut.off()
            .on("click",
                function() {
                    Common.logout();
                });
    };
    return {
        init: init,
        initBootstrapModal: initBootstrapModal,
        bindPageEvents: bindPageEvents,
        bindBootstrapModalEvents: bindBootstrapModalEvents

    };
})();

$(document)
    .ready(function() {
        App.init();
    });;
var MarkupGenerator = (function() {
    "use strict";

    var fillDropdown = function (options) {
        var args = options;
        if (args.clearFirst) {
            MarkupGenerator.clearOptionsForDropDown(args.$dropdown, args.keepDefaultOption);
        }

        if (args.data && args.data.length) {
        
        args.$dropdown.html(MarkupGenerator.generateMarkupForDropDown(args.elementId,
                                args.elementClass,
                                args.data,
                                args.textFieldName,
                                args.valueFieldName,
                                args.defaultOptionText,
                                args.toolTip,
                                args.generateOptionsOnly));
        }

        if (args.onComplete) {
            args.onComplete();
        }

        if (args.setValue) {
            UIManager.changeSearchableDropdownValue(args.$dropdown, args.setValue);
        }
        else if (args.triggerChangeEvent) {
            args.$dropdown.trigger("change");
        }
    }

    var generateMarkupForDropDown = function (dropdownElementId, dropdownElementClass, itemsArray, textFieldName, valueFieldName, placeholderText, toolTip, optionsOnly, dataAttributes) {
        //
        var markup = "";
        var itemsMarkup = "";

        if (!optionsOnly) {
            markup = markup + "<select id=\"%DropdownId%\" class=\"%DropdownClass%\" %ToolTip%>";
        }

        if (placeholderText && placeholderText.length > 0) {

            markup = markup + "<option value=\"\" selected=\"selected\">%PlaceholderText%</option>";
        }

        markup = markup + "%Items%";

        if (!optionsOnly) {
            markup = markup + "</select>";
        }

        if (itemsArray && itemsArray.length > 0) {
            for (var i = 0; i < itemsArray.length; i++) {
                var thisItem = itemsArray[i];
                if (thisItem) {
                    itemsMarkup = itemsMarkup + "<option ";
                    itemsMarkup = itemsMarkup + "value=\"%Value%\"";
                    if (dataAttributes && dataAttributes.length > 0) {
                        for (var j = 0; j < dataAttributes.length; j++) {
                            var thisDataAttribute = dataAttributes[j];
                            itemsMarkup = itemsMarkup + " data-" + thisDataAttribute.name + "=\"" + thisItem[thisDataAttribute.value] + "\" ";
                        }
                    }

                    itemsMarkup = itemsMarkup + ">%Text%</option>";


                    var thisItemReplacements = {
                        "%Text%": typeof thisItem[textFieldName] != "undefined" ? thisItem[textFieldName] : "",
                        "%Value%": typeof thisItem[valueFieldName] != "undefined" ? thisItem[valueFieldName] : ""
                    };
                    itemsMarkup = itemsMarkup.replace(/%\w+%/g, function(all) {
                        return thisItemReplacements[all];
                    });
                }
            }
        }

        var replacements = {
            "%DropdownId%": dropdownElementId ? dropdownElementId : "dropdown" + Common.getRandomString(5),
            "%DropdownClass%": dropdownElementClass ? dropdownElementClass : "",
            "%PlaceholderText%": placeholderText,
            "%ToolTip%": toolTip ? "title=\"" + toolTip + "\"" : "",
            "%Items%": itemsMarkup
        };
        markup = markup.replace(/%\w+%/g, function(all) {
            return replacements[all];
        });

        return markup;
    };

    var clearOptionsForDropDown = function($dropdown, keepDefaultOption) {
        if (keepDefaultOption) {
            $($dropdown).find("option:not(:first-child)").remove();
        } else {
            $($dropdown).find("option").remove();
        }
    };

    var loadPartialView = function(args) {

        var load = function() {
            $.ajax({
                url: args.urlGetPartialView,
                type: "GET",
                contentType: "application/json; charset=utf-8",
                cache: false,
                async: args.async,
                success: function(data, status) {

                    if (status && data) {
                        var markup = data;
                        $(args.$targetElement).html(markup);
                        if (args.callBack) {
                            args.callBack();
                        }
                    }
                },
                error: function(data) {

                    UIManager.showErrorMessage(data.Message);
                }
            });
        };
        if (args.reloadIfAlreadyLoaded) {
            load();
        } else {
            if ($(args.$targetElement).children().length <= 0) {
                load();
            }
        }
    };

    return {
        //init: init,
        fillDropdown:fillDropdown,
        generateMarkupForDropDown: generateMarkupForDropDown,
        clearOptionsForDropDown: clearOptionsForDropDown,
        loadPartialView: loadPartialView
    };
})();

;
var Common = (function() {
    var urls = new (function() {
        this.baseUrl = window.location.origin
            ? window.location.origin
            : window.location.protocol + "//" + window.location.hostname + (window.location.port ? ":" + window.location.port : "");
        this.reportViewer = this.baseUrl + "/Reports/ReportViewer.aspx";
        this.documentViewer = this.baseUrl + "/document/document/documentViewer";
        this.mutationBasicInformation = this.baseUrl + "/Mutation/BasicInformation";
        this.mutationDashBoard = this.baseUrl + "/Mutation/DashBoard";
    })();

    //TODO: ZM: Can we move all these related methods to UIManager.js?
    var setValidationDefaults = function() {
        $.validator.defaults.ignore = ".no-validation";
    };

    var setjqGridDefaults = function() {
        $.extend(true,
            $.jgrid.defaults,
            {
                cmTemplate: { resizable: false } //,
                //prmNames: {
                //    id: "_rowid", page: "_page", rows: "_rows",
                //    oper: "_oper", sort: "_sidx", order: "_sord"
                //}
            });
    };

    var setToastrDefaults = function() {
        toastr.options = {
            "positionClass": "toast-top-left",
            "timeOut": "10000",
            //"extendedTimeOut": "0",
            "rtl": true,
            "closeButton": true,
            "closeDuration": 0,
            //"tapToDismiss ": true,
            "hideDuration": "0"
            //"onCloseClick ": function() {
            //    toastr.remove();
            //},
            //"onclick": function() {
            //    toastr.remove();
            //}
        };
    };

    var setBootstrapSwitchDefaults = function() {

        $.fn.bootstrapSwitch.defaults.onColor = "success";
        $.fn.bootstrapSwitch.defaults.offColor = "danger";
    };

    var setSelect2Defaults = function() {

        $.fn.select2.defaults.set("language", "ur");
        $.fn.select2.defaults.set("dir", "rtl");
    };

    var setjQueryAjaxDefauts = function() {
        $(document)
            .ajaxError(function(event, request, settings) {
                if (request && request.responseJSON && request.responseJSON.Message) {
                    UIManager.showErrorMessage(request.responseJSON.Message);
                }
            });
    };

    var setCultureDefauts = function() {
        Common.overrideUnobtrusiveValidation();
    };

    var getRandomString = function(length) {
        var characters = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz".split("");

        if (!length) {
            length = Math.floor(Math.random() * characters.length);
        }

        var str = "";
        for (var i = 0; i < length; i++) {
            str += characters[Math.floor(Math.random() * characters.length)];
        }
        return str;
    };

    var logout = function() {
        UIBlocker.blockScreen();
        StorageManager.clearSessionStorage();
        StorageManager.clearLocalStorage();

        $.ajax({
            url: "/Home/Logout",
            type: "POST",
            async: true,
            contentType: "application/json; charset=utf-8",
            success: function(result) {
                UIBlocker.unblockScreen();
                window.location.href = Common.urls.baseUrl + "/Home/Logout";
            },
            failure: function(errMsg) {
                UIBlocker.unblockScreen();
                alert(errMsg);
            }
        });

    };

    var getQueryStringAsObject = function() {
        var queryStringArray = location.search.slice(1).split("&");

        var result = {};
        for (var i = 0; i < queryStringArray.length; i++) {
            var thisPair = queryStringArray[i];
            thisPair = thisPair.split("=");
            result[thisPair[0]] = decodeURIComponent(thisPair[1] || "");
        }

        return JSON.parse(JSON.stringify(result));
    };

    var createQueryStringFromObject = function(object) {
        var queryString = "";
        var keys = Object.keys(object);
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            var value = object[key];

            queryString = queryString ? queryString + "&" + key + "=" + value : "?" + key + "=" + value;
        }
        return queryString;
    };

    var introduceSerializeObject = function() {
        var getElementValue = function(that) {
            var val = null;
            var $element = $("[name=\"" + that.name + "\"]");

            if ($element) {
                switch ($element.attr("type")) {
                    case "checkbox":
                        val = $element.is(":checked");
                        break;
                    default:
                        val = $element.val();
                }
            }
            return val;
        };
        $.fn.serializeObject = function() {
            var o = {};
            var a = this.serializeArray();
            $.each(a,
                function() {

                    var existInList = o[this.name] !== undefined;
                    if (!existInList) {
                        if (Common.isDate((getElementValue(this)))) {
                            o[this.name] = Converter.dateTimeStringToUtcDateTime(getElementValue(this)).toJSON() || "";
                        } else {
                            o[this.name] = getElementValue(this) || "";
                        }
                    }

                });
            return o;
        };
    };

    var refreshUnobtrusiveValidation = function($element) {
        //TODO: This method should only be called when bootstrap modal or any other element in added to DOM and it has a form to be validated, and that element must be passed here.
        //TODO: Call of this method from FardBadr is to be removed.
        var $form = $element.is("form") ? $element : $element.find("form");
        if ($form.length) {
            $form.data("unobtrusiveValidation", null);
            $form.data("validator", null);
            $.validator.unobtrusive.parse($form);
        }
    };

    var resetUnobtrusiveValidation = function($element) {
        var $form = $element.is("form") ? $element : $element.find("form");
        if ($form.length) {
            $form.find(".input-validation-error")
                .addClass("input-validation-valid")
                .removeClass("input-validation-error");
            $form.find(".field-validation-error")
                .addClass("field-validation-valid")
                .removeClass("field-validation-error");
            $form.find(".validation-summary-errors")
                .addClass("validation-summary-valid")
                .removeClass("validation-summary-errors");
        }
    };

    var overrideUnobtrusiveValidation = function() {
        $.validator.addMethod(
            "date",
            function(value, element) {
                var bits = value.match(/([0-9]+)/gi);
                if (!bits)
                    return this.optional(element) || false;
                var str = bits[1] + "/" + bits[0] + "/" + bits[2];
                return this.optional(element) || !/Invalid|NaN/.test(new Date(str));
            },
            "Please enter a date in the format dd/mm/yyyy"
        );
    };

    var getjqGridRowData = function($grid, rowId) {
        return $grid.jqGrid("getRowData", rowId);
    };

    var getjqGridRowLocalData = function($grid, rowId) {
        var index = rowId - 1;
        return $grid.jqGrid("getGridParam", "data")[index];
    };

    var getjqGridPostData = function($grid) {
        return $grid.jqGrid("getGridParam", "postData");
    };

    var isDate = function(value, format) {
        return moment(value, format || Common.dateTimeFormat.shortDatePattern, true).isValid();
    };

    var isUserSelectedHissaValid = function(totalHissa, selectedHissa) {
        var arrTotalHissa = totalHissa.split("/");
        var arrSelectedHissa = selectedHissa.split("/");

        var fractionalTotalHissa = (parseInt(arrTotalHissa[0]) * 1.0) / parseInt(arrTotalHissa[1]);
        var fractionalSelectedHissa = (parseInt(arrSelectedHissa[0]) * 1.0) / parseInt(arrSelectedHissa[1]);

        if ((fractionalSelectedHissa <= 1) && (fractionalTotalHissa >= (fractionalTotalHissa * fractionalSelectedHissa))
        ) {
            return true;
        }
        return false;
    };

    var regex = {
        areaFormat: "^([0-9]+)-([0-9]|1[0-9])-([0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-6][0-9]|27[0-2]|272.5)$",
        shareFormat: "^([1-9][0-9]*)(\/{1})([1-9][0-9]*)$"
    };

    var dateTimeFormat = {
        shortDatePattern: "DD/MM/YYYY"
    };

    var jqGrid = {
        dataTypes: {
            local: "local",
            json: "JSON"
        },
        methodTypes: {
            get: "Get",
            post: "Post"
        },
        direction: "rtl",
        rowNum: 10,

        maxRowNum: 2147483647,
        rownumbers: true,
        rownumWidth: 50,
        rowList: [10, 20, 30, 40, 50, 80, 100],
        sortorder: "desc",
        colNames: null,
        height: "100%",
        styleUI: "Bootstrap",
        alternateRowColor: "#E8E8E8",
        hideEmptyGrid: false
    };

    var select2 = {
        minimumInputLength: 3,
        placeholder: "منتخب کیجیے",
        width: "100%",
        allowClear: true,
        ajax: {
            dataTypes: {
                json: "JSON"
            },
            delay: 250,
            cache: true
        }
    };

    var fardBdarTypeEnum = {
        Rhz: 1,
        Shajra: 2,
        Fieldbook: 3,
        FieldbookTateema: 4
    };

    var typeLookUpEnum = {
        intiqal: 2,
        intiqalGumshada :26,
        stayOrder : 42
    };

    var khatuniTypeEnum = {
        HisaDar : 1558
    };
    var naqalTypeEnum = {
        FardBadr: 2,
        Fard: 1,
        ShajraHissaBay : 6
    };

    var fardTypeEnum = {
        ZatiRecord: 1,
        Rehan: 4,
        FakRehan: 5,
        BayMehfuzgiRehan: 14,
        HibaMehfuzgiRehan: 15,
        BayHaqMurtehni: 36,
        FakUrRehanTakmeeli: 43,
        ArhRehan: 44,
        IzadiArhRehan: 45,
        FakArhRehan: 46,
        HibaHaqMurtehni: 47,
        HibaTamleeq: 48,
        TaqseemNama : 75,
        HasoolQarza: 10

    };

    var territoryRangeEnum = {
        DivisionOnly: 0,
        DivisionToDistrict: 1,
        DivisionToTehsil: 2,
        DivisionToQanoonGoi: 3,
        DivisionToPatwarCircle: 4,
        DivisionToMauza: 5,
        DivisionToTaraf: 6,
        DivisionToPatti: 7,


        Division: 0,
        District: 1,
        Tehsil: 2,
        QanoonGoi: 3,
        PatwarCircle: 4,
        Mauza: 5,
        Taraf: 6,
        Patti: 7
    };

    var entityState = {
        Unchanged: 0,
        New: 1,
        Modified: 2,
        Deleted: 3,
        Excluded: 4
    };

    var partyRegistrationSourceType = {
        Azkhud: 1,
        Applicant: 12,
        Dastaweez: 13
    };

    var reportTypeEnum = {
        Naqal: 1,
        Application: 2,
        Challan: 3
    };

    var idCardType = {
        CNIC: "1",
        NICOP: "2",
        POC: "3",
        PASSPORT: "4"
    };

    var docSourceType = {
        Visit: "1",
        Process: "2",
        Person: "3"
    };

    var blockageReasonEnum = {
        Block: 1,
        StayOrder: 2,
        CancelStayOrder: 3,
        Qurqi: 4,
        CancelQurqi: 5,
        Caution: 6,
        CancelCaution: 7

    };

    var blockedEntityTypeEnum = {
        Khewat: 1,
        Khatuni: 2,
        Person: 3,
        Ownership: 4,
        Possession: 5,
        Khasra: 6
    };

    var messageTypeEnum = {
        Success: 1,
        Error: 2,
        Warning: 3,
        Info: 4
    };

    var processTypeEnum = {
        Fard: 1,
        Intiqal: 2,
        FardBadr: 4,
        Jamabandi: 23
    };

    var personTypeEnum = {
        IsPerson: 1,
        IsGoverment: 2,
        IsOrganization: 3
    };

    var partyTypeEnum = {
        Seller: 1,
        Buyer: 2,
        Witness: 3
    };
    var processInititationTypeEnum = {
        Zubani: 1,
        Registry: 2,
        BahukamAdalat:3,
        TaqseemKhangi:5
    };

    var intiqalTypeEnum = {
        Ishtiraq: 29,
        Taqseem: 16,
        Bay:1

    };

    var intiqalReviewEnum = {
        MutationCorrect: 1,
        NeedCorrection: 2,
        CancelMutation: 3
    };

    var progressBarTypeEnum = {
        Success: 1,
        Info: 2,
        Warning: 3,
        Danger: 4
    };

    var rhzViewModeEnum = {
        None : 0,
        RhzMode : 1,
        KhewatViewMode : 2,
        KhatuniViewMode : 3,
        FardBadrMode : 4,
        ReadOnlyFardBadrMode : 5,
        MutationMode : 6,
        ReadOnlyMutationMode : 7
    };

    var transactionTypeEnum = {
        Intiqal: 1,
        Blockage: 2,
        FardBadr: 3,
        Naqal: 4
    };

    var processStatusEnum = {

        Completed: 184,
        NaManzoor: 186
    }

    var biometricDataConstants = {

        SuccessCode : "100",
        WebReqFailCode : "400",
        FailureCode : "111",
        AnsiInitials : "Rk1SACAy",
        NadraServiceDown : "108",
        NadraException : "109",
        NadraVeriSuccButSessionExpired : "202",
        NoBiometricRecordExistsInLRMIS : "001"
    }


    var visitSourceEnum = {
        KhidmatCorner: "2",
        VIPCounter: "3",
        BankCounter: "4"
    };
    var openReport = function (plaindata, url, isblockUI) {
        if (isblockUI) {
            UIBlocker.blockScreen();
        }
        var data = { data: plaindata };

        $.ajax({
            url: "/Home/getEncryptedData",
            data: data,
            type: "get",
            async: false,
            contentType: "application/json; charset=utf-8",
            success: function (response) {
                if (isblockUI) {
                    UIBlocker.unblockScreen();
                }
                url = url.replace("***PROCESSID***", response)
                window.open("" + url)
            },
            failure: function (errMsg) {
                if (isblockUI) {
                    UIBlocker.unblockScreen();
                }
                result = "";
            }
        });

    };

    return {
        urls: urls,
        jqGrid: jqGrid,
        select2: select2,
        setValidationDefaults: setValidationDefaults,
        setjqGridDefaults: setjqGridDefaults,
        setToastrDefaults: setToastrDefaults,
        setBootstrapSwitchDefaults: setBootstrapSwitchDefaults,
        setSelect2Defaults: setSelect2Defaults,
        setjQueryAjaxDefauts: setjQueryAjaxDefauts,
        setCultureDefauts: setCultureDefauts,
        territoryRangeEnum: territoryRangeEnum,
        entityState: entityState,
        reportTypeEnum: reportTypeEnum,
        getRandomString: getRandomString,
        getQueryStringAsObject: getQueryStringAsObject,
        createQueryStringFromObject: createQueryStringFromObject,
        introduceSerializeObject: introduceSerializeObject,
        isUserSelectedHissaValid: isUserSelectedHissaValid,
        logout: logout,
        refreshUnobtrusiveValidation: refreshUnobtrusiveValidation,
        resetUnobtrusiveValidation: resetUnobtrusiveValidation,
        overrideUnobtrusiveValidation: overrideUnobtrusiveValidation,
        idCardType: idCardType,
        docSourceType: docSourceType,
        getjqGridRowData: getjqGridRowData,
        getjqGridRowLocalData: getjqGridRowLocalData,
        getjqGridPostData: getjqGridPostData,
        dateTimeFormat: dateTimeFormat,
        regex: regex,
        isDate: isDate,
        blockageReasonEnum: blockageReasonEnum,
        blockedEntityTypeEnum: blockedEntityTypeEnum,
        messageTypeEnum: messageTypeEnum,
        processTypeEnum: processTypeEnum,
        personTypeEnum: personTypeEnum,
        fardBdarTypeEnum: fardBdarTypeEnum,
        fardTypeEnum: fardTypeEnum,
        naqalTypeEnum: naqalTypeEnum,
        partyTypeEnum: partyTypeEnum,
        processInititationTypeEnum: processInititationTypeEnum,
        intiqalTypeEnum: intiqalTypeEnum,
        intiqalReviewEnum: intiqalReviewEnum,
        progressBarTypeEnum: progressBarTypeEnum,
        partyRegistrationSourceType: partyRegistrationSourceType,
        rhzViewModeEnum: rhzViewModeEnum,
        khatuniTypeEnum: khatuniTypeEnum,
        typeLookUpEnum: typeLookUpEnum,
        transactionTypeEnum: transactionTypeEnum,
        processStatusEnum: processStatusEnum,
        visitSourceEnum : visitSourceEnum,
        openReport: openReport
    };
})();

function getParameterByName(name) {
    name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
    var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
        results = regex.exec(location.search);
    return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
};
var UIManager = (function() {
    "use strict";

    var init = function() {
    };

    var showMessage = function(options) {


        var args = options;
        toastr.remove();
        switch (args.messageTypeId) {
        case Common.messageTypeEnum.Success:
            toastr.success(args.messageText);
            break;
        case Common.messageTypeEnum.Error:
            toastr.error(args.messageText);
            break;
        case Common.messageTypeEnum.Warning:
            toastr.warning(args.messageText);
            break;
        case Common.messageTypeEnum.Info:
            toastr.info(args.messageText);
            break;

        default:
        }
    };

    var showSuccessMessage = function(messageText) {
        toastr.remove();
        toastr.success(messageText);
    };
    var showErrorMessage = function(messageText) {
        toastr.remove();
        toastr.error(messageText);
    };
    var showInfoMessage = function(messageText) {
        toastr.remove();
        toastr.info(messageText);
    };
    var showWarningMessage = function(messageText) {
        toastr.remove();
        toastr.warning(messageText);
    };

    var loadChosenDropdown = function($dropdowns) {
        for (var i = 0; i < $dropdowns.length; i++) {
            var $that = $($dropdowns[i]);
            $that.chosen({ width: "100%" });
        }
    };

    var reloadChosenDropdown = function($dropdown) {
        $dropdown.chosen("destroy").prop("selectedIndex", 0).chosen({ width: "100%" }).trigger("chosen:updated");
    };

    var changeChosenDropdownValue = function($dropdown, value) {
        $dropdown.chosen("destroy").prop("selectedIndex", 0).chosen({ width: "100%" }).trigger("chosen:updated");
        $dropdown.val(value).trigger("chosen:updated");
        $dropdown.trigger("change");
    };

    var changeChosenDropdownState = function($dropdown, isEnabled) {
        var alreadyEnabled = !$dropdown.prop("disabled");
        if (alreadyEnabled !== isEnabled) {
            $dropdown.prop("disabled", !isEnabled);

            $dropdown.trigger("chosen:updated");
        }
    };

    var changeChosenDropdownVisibility = function($dropdown, isVisible) {
        var $chosenDropdown = $($dropdown.selector + "_chosen");

        var alreadyVisible = $chosenDropdown.is(":visible");
        if (alreadyVisible !== isVisible) {
            $chosenDropdown.css("display", isVisible ? "block" : "none");
        }
    };

    var changeElementVisibility = function($element, isVisible) {
        var alreadyVisible = $element.is(":visible");
        if (alreadyVisible !== isVisible) {
            $element.css("display", isVisible ? "block" : "none");
        }
    };

    var clearOptionsForChosenDropdown = function($dropdown, keepDefaultOption) {
        MarkupGenerator.clearOptionsForDropDown($dropdown, keepDefaultOption);
        UIManager.reloadChosenDropdown($dropdown);
    };

    var initFilterContainer = function() {
        $(".arrow-down").hide();
        $(".option-heading")
            .on("click",
                function() {
                    var $that = $(this);
                    $that.next(".option-content").slideToggle(500);
                    $that.find(".arrow-up, .arrow-down").toggle();
                });
    };
    var initFilterContainerOnDemandLoad = function () {
        $(".arrow-up-OnDemandload").hide();
        $(".arrow-down-OnDemandload").show();
        $(".option-heading-DemandLoad")
            .on("click",
                function () {  
                    var $that = $(this);
                    $that.next(".option-content-DemandLoad").slideToggle(500);
                    $(".arrow-up-OnDemandload").toggle();
                    $(".arrow-down-OnDemandload").toggle();
                    $that.find(".arrow-up, .arrow-down").toggle();
                });
    };
    var makeSwitchable = function(args) {
        args.$elements.bootstrapSwitch();
    };

    var loadPopover = function($elements) {
        $elements.popover();
    };

    var loadSearchableDropdown = function(options) {

        var args = options;
        args.additionalOptions = args.additionalOptions || {};
        args.additionalOptions.width = args.additionalOptions.width || Common.select2.width;
        args.additionalOptions.placeholder = args.additionalOptions.placeholder || Common.select2.placeholder;
        args.additionalOptions.allowClear = typeof args.additionalOptions.allowClear != "undefined"
            ? args.additionalOptions.allowClear
            : Common.select2.allowClear;
        args.additionalOptions.minimumInputLength = args.ajaxOptions
            ? args.additionalOptions.minimumInputLength || Common.select2.minimumInputLength
            : args.additionalOptions.minimumInputLength || null;
        if (args.ajaxOptions) {
            args.additionalOptions.ajax = {
                url: args.ajaxOptions.url,
                dataType: Common.select2.ajax.dataTypes.json,
                delay: Common.select2.ajax.delay,
                data: function (params) {
                    var data;
                    if (args.additionalOptions.additionalParams) {
                        //Deep copy
                        data = $.extend(true, {}, args.additionalOptions.additionalParams);
                        data.searchText = params.term;
                    } else {
                        data = {
                            searchText: params.term
                        }
                    }

                    //if (args.additionalOptions.additionalParams) {
                    //    allParams = args.additionalOptions.additionalParams
                    //}

                    return data;
                },
                processResults: function(data, params) {

                    params.page = params.page || 1;

                    var items = $.map(data.AdditionalData,
                        function(obj) {
                            return {
                                id: obj[args.ajaxOptions.valueFieldName],
                                text: obj[args.ajaxOptions.textFieldName]
                            };
                        });

                    return {
                        results: items,
                        pagination: {
                            more: false
                        }
                    };
                },
                cache: typeof args.ajaxOptions.cache != "undefined"
                    ? args.ajaxOptions.cache
                    : Common.select2.ajax.dataTypes.cache
            };

        }


        if (args.$element) {
            args.$element.select2(args.additionalOptions)
                .on("change",
                    function() {
                        var el = $(this);
                        //var el = args.$element;
                        if (el.attr("data-val")) {

                            el.valid();
                        }

                        //el2.valid();
                    });
        }
    };

    var changeSearchableDropdownValue = function($dropdown, value) {
        $dropdown.val(value).trigger("change");

    };

    var loadDateTimePicker = function($elements, options) {
        options = options || {};
        options.format = Common.dateTimeFormat.shortDatePattern;
        options.useCurrent = typeof options.useCurrent != "undefined" ? options.useCurrent : false;
        //TODO
        //for (var i = 0; i < $elements.length; i++) {
        //    var $that = $elements[i];
        //}
        $elements.datetimepicker(options);
    };


    var changeDateTimePickerState = function($elements, isEnabled) {

    };

    var loadGrid = function(options) {
        var args = options;

        //TODO zm: Improve this.
        var onLoadComplete = options.gridOptions.loadComplete;

        args.gridOptions = args.gridOptions || {};
        args.gridOptions.height = args.gridOptions.height || Common.jqGrid.height;
        args.gridOptions.autowidth = args.gridOptions.autowidth || false;
        args.gridOptions.multiselect = args.gridOptions.multiselect || false;
        args.gridOptions.styleUI = Common.jqGrid.styleUI;
        args.gridOptions.hideEmptyGrid = args.gridOptions.hideEmptyGrid || Common.jqGrid.hideEmptyGrid;
        args.gridOptions.loadComplete = function() {
            args.$grid.find("tr.jqgrow:odd").css("background", Common.jqGrid.alternateRowColor);
            if (args.gridOptions.hideEmptyGrid) {
                var recordsCount = args.$grid.jqGrid("getGridParam", "reccount");
                if (recordsCount > 0) {
                    args.$grid.closest(".ui-jqgrid").removeClass("hidden").prev("h4, h3").removeClass("hidden");
                    //args.$grid.closest(".ui-jqgrid").removeClass("hidden");
                } else {
                    args.$grid.closest(".ui-jqgrid").addClass("hidden").prev("h4, h3").addClass("hidden");
                    //args.$grid.closest(".ui-jqgrid").removeClass("hidden");
                }
            }
            if (onLoadComplete) {
                onLoadComplete();
            }
        };
        args.gridOptions.gridview = args.gridOptions.gridview || true;
        args.gridOptions.rowattr = args.gridOptions.rowattr || null;
        args.gridOptions.direction = Common.jqGrid.direction;
        args.gridOptions.rowList = args.gridOptions.rowList || Common.jqGrid.rowList;
        args.gridOptions.rowNum =(args.gridOptions.datatype === Common.jqGrid.dataTypes.local ||
            args.gridOptions.pgbuttons === false) && (!args.gridOptions.isLocalWithPagination || args.gridOptions.isLocalWithPagination===false)
            ? Common.jqGrid.maxRowNum
            : Common.jqGrid.rowNum;
        
            
        args.gridOptions.rownumbers = typeof args.gridOptions.rownumbers !== "undefined"
                ? args.gridOptions.rownumbers
                : Common.jqGrid.rownumbers,
            args.gridOptions.viewrecords = args.gridOptions.viewrecords || true;
        args.gridOptions.sortorder = args.gridOptions.sortorder || Common.jqGrid.sortorder;
        args.gridOptions.jsonReader = args.gridOptions.jsonReader ||
        {
            Id: "0",
            total: "Total",
            page: "Page",
            records: "Records",
            root: "Rows",
            repeatitems: false
        };
        args.gridOptions.loadBeforeSend = function() {
          //  UIBlocker.blockScreen(); // block the grid/screen
            return true; // allow request to the server
        };
        args.gridOptions.beforeProcessing = function() {
           // UIBlocker.unblockScreen(); // unblock the grid/screen
            return true; // process the server response
        };

        args.gridOptions.loadError = function() {
           // UIBlocker.unblockScreen();
            UIManager.showMessage({
                messageTypeId: Common.messageTypeEnum.Error,
                messageText: "نقص واقع ہوا ہے، ڈیٹا لوڈ نہیں ہو سکتا۔"
        //There is no way to get text in urdu. That's why hardcoded.
            });
        };
        if (args.$grid) {
            args.$grid.jqGrid(args.gridOptions || null)
                .navGrid(
                    args.gridNavOptions || null
                );

            if (args.gridOptions.rowNumbersColText) {
                args.$grid.jqGrid("setLabel", "rn", args.gridOptions.rowNumbersColText);
            }
        }
    };

    var filterGrid = function($grid, postData, reloadOptions) {
        if ($grid) {
            if (postData && Object.keys(postData).length) {
                $grid.setGridParam({ postData: postData });
            }
            UIManager.reloadGrid($grid, reloadOptions);
        }
    };

    var reloadGrid = function ($grid, options) { 
        if ($grid) {
            options = options || {};
            options.datatype = options.datatype || Common.jqGrid.dataTypes.json;
            options.page = options.page || 1;
            $grid.setGridParam(options).trigger("reloadGrid");
        }
    };

    var setGridOptions = function(options) {
        var args = options;
        args.$grid.jqGrid(args.options);
    };

    var clearGrid = function($grid) {
        if ($grid) {
            $grid.jqGrid("clearGridData", true);
        }
    };

    var gridInlineRowOperation = function($grid, operation, rowId, params) {

        if ($grid && operation && rowId) {
            $grid.jqGrid(operation, rowId, params);
        }
    };

    var valueExistsInDropdown = function(options) {
        var args = options;

        var exists = null;
        if (args && args.$element && args.value) {
            exists = args.$element.find("option[value='" + args.value + "']").length > 0 ? true : false;
        }

        return exists;
    };

    var loadInputMask = function(options) {
        var args = options;

        if (args.$element) {
            args.$element.mask(args.maskFormat, args.maskOptions);

            args.$element.attr("placeholder", args.maskOptions.placeholder);
        }

    };

    //Following code is moved from Layout.cshtml, written by Designer.
    //I have performed some refactoring, more refactoring is needed
    //Designer's Code --Starts
    var loadMenu = function() {

        //var isMenuOpened = StorageManager.getSessionStorage("isMenuOpened") === "true";
        //if (isMenuOpened) {
        //    $("#sidebar-wrapper").css({"width":"220px"});
        //}

        //because :empty selects only those elements which have no children and also no white spaces.
        $(".sub-menu:not(:has(*))").closest(".menu-item").addClass("hidden");

        $("#menu-toggle")
            .on("click",
                function() {
                    UIManager.toggleMenu();
                });

        $("#page-content-wrapper, header")
            .on("click",
                function(e) {

                    $("#sidebar-wrapper").css({ "width": 20 });
                    $(".menuSelected").removeClass("menuSelected");
                    //var container = $("#sidebar-wrapper");
                    //if (!container.is(e.target) // if the target of the click isn't the container...
                    //    &&
                    //    container.has(e.target).length === 0) // ... nor a descendant of the container
                    //{

                    //    container.css({"width":20});
                    //}
                });
    };

    var toggleMenu = function() {

        var $sidebarWrapper = $("#sidebar-wrapper");
        var isMenuOpened = $sidebarWrapper.width() >= 220;
        $(".menuSelected").removeClass("menuSelected");
        if (!isMenuOpened) {
            var menuLinks = $(".sub-menu a");
            for (var i = 0; i < menuLinks.length; i++) {
                var $currentElement = $(menuLinks[i]);
                var url = window.location.pathname !== "/" ? window.location.pathname + window.location.search : null;
                if ($currentElement.attr("href").indexOf(url) !== -1) {

                    $currentElement.addClass("menuSelected");
                    var $menuSelected = $(".menuSelected");
                    $menuSelected.parent().prev().addClass("parentSelected");
                    $menuSelected.parent().collapse("show");
                    $menuSelected.focus();
                    //TODO: IsmenuOpened will always false here. No need for this condition
                    //$sidebarWrapper.animate({ width: isMenuOpened ? "20px" : "220px" },
                    //                        function () {
                    //                            isMenuOpened = $sidebarWrapper.width() >= 220;
                    //                            //StorageManager.setSessionStorage("isMenuOpened", isMenuOpened ? "true" : "false");
                    //                        });
                    break;
                }
            }

        }
        //} else {
        //    $("#sidebar-wrapper").css({ "width": 20 });
        //}

        $sidebarWrapper.animate({ width: isMenuOpened ? "20px" : "220px" });
    };

    var loadCustomScrollbar = function() {
        $(".sidebar-nav")
            .mCustomScrollbar({
                theme: "my-theme"
            });
    };

    ///There seems to be no usage of this code.
    //$(document)
    //    .ready(function () {
    //        $(".searchinput")
    //            .keyup(function () {
    //                $(this).next().toggle(Boolean($(this).val()));
    //            });
    //        $(".searchclear").toggle(Boolean($(".searchinput").val()));
    //        $(".searchclear")
    //            .click(function () {
    //                $(this).prev().val("").focus();
    //                $(this).prev().keyup();
    //                $(this).hide();
    //            });
    //    });

    //Designer's Code --Ends


    return {
        init: init,
        loadGrid: loadGrid,
        filterGrid: filterGrid,
        reloadGrid: reloadGrid,
        setGridOptions: setGridOptions,
        clearGrid: clearGrid,
        showMessage: showMessage,
        showSuccessMessage: showSuccessMessage,
        showErrorMessage: showErrorMessage,
        showInfoMessage: showInfoMessage,
        showWarningMessage: showWarningMessage,
        loadChosenDropdown: loadChosenDropdown,
        reloadChosenDropdown: reloadChosenDropdown,
        changeChosenDropdownValue: changeChosenDropdownValue,
        changeChosenDropdownState: changeChosenDropdownState,
        changeChosenDropdownVisibility: changeChosenDropdownVisibility,
        clearOptionsForChosenDropdown: clearOptionsForChosenDropdown,
        changeElementVisibility: changeElementVisibility,
        initFilterContainer: initFilterContainer,
        initFilterContainerOnDemandLoad:initFilterContainerOnDemandLoad,
        makeSwitchable: makeSwitchable,
        loadPopover: loadPopover,
        loadDateTimePicker: loadDateTimePicker,
        changeDateTimePickerState: changeDateTimePickerState,
        loadSearchableDropdown: loadSearchableDropdown,
        changeSearchableDropdownValue: changeSearchableDropdownValue,
        valueExistsInDropdown: valueExistsInDropdown,
        loadInputMask: loadInputMask,
        loadCustomScrollbar: loadCustomScrollbar,
        loadMenu: loadMenu,
        toggleMenu: toggleMenu,
        gridInlineRowOperation: gridInlineRowOperation
    };
})();
;
var StorageManager = (function() {
    var setSessionStorage = function(key, value) {
        if (key && key.length > 0 && value) {
            sessionStorage.setItem(key, value);
            return true;
        }

        return false;
    };

    var getSessionStorage = function(key) {
        if (key && key.length > 0) {
            return sessionStorage.getItem(key);
        }

        return false;
    };

    var removeSessionStorage = function(key) {
        if (key && key.length > 0) {
            sessionStorage.removeItem(key);
            return true;
        }

        return false;
    };

    var getSessionStorageItemPosition = function(key) {
        if (key && key.length > 0) {
            return sessionStorage.key(key);
        }

        return false;
    };

    var clearSessionStorage = function() {
        sessionStorage.clear();
    };

    var setLocalStorage = function(key, value) {
        if (key && key.length > 0 && value) {
            localStorage.setItem(key, value);
            return true;
        }

        return false;
    };

    var getLocalStorage = function(key) {
        if (key && key.length > 0) {
            return localStorage.getItem(key);
        }

        return false;
    };

    var removeLocalStorage = function(key) {
        if (key && key.length > 0) {
            localStorage.removeItem(key);
            return true;
        }

        return false;
    };

    var getLocalStorageItemPosition = function(key) {
        if (key && key.length > 0) {
            return localStorage.key(key);
        }

        return false;
    };

    var clearLocalStorage = function() {
        localStorage.clear();
    };
    return {
        setSessionStorage: setSessionStorage,
        getSessionStorage: getSessionStorage,
        removeSessionStorage: removeSessionStorage,
        getSessionStorageItemPosition: getSessionStorageItemPosition,
        clearSessionStorage: clearSessionStorage,
        setLocalStorage: setLocalStorage,
        getLocalStorage: getLocalStorage,
        removeLocalStorage: removeLocalStorage,
        getLocalStorageItemPosition: getLocalStorageItemPosition,
        clearLocalStorage: clearLocalStorage
    };
})();
;
var UIBlocker = (function() {

    
    var opts = {
        lines: 9, 
        length: 20, 
        width: 20,
        radius: 30, 
        scale: 0.25, 
        corners: 1.0, 
        color: "#FFFFFF", 
        opacity: 0.50, 
        rotate: 77, 
        direction: 1, 
        speed: 2.0, 
        trail: 50, 
        fps: 20, 
        zIndex: 2e9, 
        className: "spinner", 
        top: "50%", 
        left: "50%", 
        shadow: false, 
        hwaccel: false, 
        position: "absolute" 
    }; 
    var screenBlockedCount = 0; 


    var blockScreen = function() {


        screenBlockedCount++;
        var isAlreadyBlocked = $("#blockScreen");
        if (!isAlreadyBlocked.length > 0) {
            var markup = "<div id=\"%id%\" style=\"background-color:%background%; opacity:%opacity%; z-index:%zindex%; border:%border%; margin:%margin%; padding:%padding%; width:%width%; height:%height%; top:%top%; position:%position%; cursor:%cursor%\"></div>";
            var replacements = {
                "%id%": "blockScreen",
                "%background%": "#000000",
                "%opacity%": "0.6",
                "%zindex%": "100000",
                "%border%": "medium none",
                "%margin%": "0px",
                "%padding%": "0px",
                "%width%": "100%",
                "%height%": "100%",
                "%position%": "fixed",
                "%top%": "0%",
                "%left%": "0%",
                "%cursor%": "wait"
            };
            markup = markup.replace(/%\w+%/g, function(all) {
                return replacements[all];
            });

            $("body").append(markup);
            var target = document.getElementById("blockScreen");
            new Spinner(opts).spin(target);
        } else {
            //console.log("Warning!... Already Screen Blocked");
        }
    };


    var blockElement = function($element) {
        
        if ($element) {
            var elementId = "blockElement_" + $element.attr("id");
            var isAlreadyBlocked = $("#" + elementId);
            if (!isAlreadyBlocked.length > 0) {

                var markup = "<div id=\"%id%\" class=\"blocked\" style=\"background-color:%background%; opacity:%opacity%; z-index:%zindex%; border:%border%; margin:%margin%; padding:%padding%; top:%top%; position:%position%; cursor:%cursor%\"></div>";

                var replacements = {
                    "%id%": elementId,
                    "%background%": "#000000",
                    "%opacity%": "0.6",
                    "%zindex%": "100000",
                    "%border%": "medium none",
                    "%margin%": "0px",
                    "%padding%": "0px",
                    "%width%": "100%",
                    "%height%": "100%",
                    "%position%": "absolute",
                    "%top%": "0%",
                    "%left%": "0%",
                    "%cursor%": "wait"
                };
                markup = markup.replace(/%\w+%/g, function(all) {
                    return replacements[all];
                });

                
                $("body").append(markup);

                
                $("#" + elementId).css("width", $element.css("width"));

                
                var height = $element.height() > 0
                    ? $element.height()
                    : $element.find("*").length > 0 && $element.find("*").height() > 0
                    ? $element.find("*").height()
                    : null;
                $("#" + elementId).css("height", height);

                
                $("#" + elementId).offset($element.offset());

            } else {
                //console.log("Warning!... Already Element Blocked");
            }
        }
    };


    var unblockScreen = function() {

        screenBlockedCount--;
        if (!screenBlockedCount) {
            $("#blockScreen").remove();
        }

    };

    
    var unblockElement = function($element) {
        if ($element) {
            var elementId = "blockElement_" + $element.attr("id");
            $("#" + elementId).remove();
        } else {
            $(".blocked").remove();
        }
    };


    //message: Loading message
    //events: 
    //progressBarType:1=success(green),2=info(blue),3=warning(yellow), 4=danger(red)


    var showLoading = function(options) {
        
        var args = options;
        var modalMarkup =
            "<div id=\"loadingDialog\" class=\"modal fade\">" +
                "<div class=\"modal-dialog modal-m\">" +
                "<div class=\"modal-content\" >" +
                "<div class=\"modal-header\"><h3>%Message%</h3></div>" +
                "<div class=\"modal-body\" >" +
                "<div class=\"progress progress-striped active\">" +
                "<div class=\"%ProgressBarType%\" style=\"width: 100%\"></div></div>" +
                "</div>" +
                "</div></div></div>";


        var replacements = {
            "%Message%": args && args.message ? args.message : "انتظار فرمائیں",
            "%ProgressBarType%": args && args.progressBarType
                ? args.progressBarType === Common.progressBarTypeEnum.Success
                ? "progress-bar progress-bar-success"
                : args.progressBarType === Common.progressBarTypeEnum.Info
                ? "progress-bar progress-bar-info"
                : args.progressBarType === Common.progressBarTypeEnum.Warning
                ? "progress-bar progress-bar-warning"
                : args.progressBarType === Common.progressBarTypeEnum.Danger
                ? "progress-bar progress-bar-danger"
                : "progress-bar"
                : "progress-bar"
    };
        modalMarkup = modalMarkup.replace(/%\w+%/g, function (all) {
            return replacements[all];
        });
        
        $("body").append(modalMarkup);

        var $modal = $("#loadingDialog");

        UIBlocker.bindModalEvents($modal,args);

        $modal.css({
            "margin-top": "216px"
        });
     
      
        $modal.modal({
            show: true,
            keyboard: false,
            backdrop: "static"
        });
       

    };

    var hideLoading = function() {
        $("#loadingDialog").modal("hide");
    };

    var bindModalEvents = function ($modal, args) {
        //Events from Caller
        if (args && args.events && Object.keys(args.events).length > 0) {
            if (args.events.onShow) {
                $modal.on("show.bs.modal", function () {
                    args.events.onShow();
                });
            }

            if (args.events.onShown) {
                $modal.on("shown.bs.modal", function () {
                    args.events.onShown();
                });
            }


            if (args.events.onHide) {
                $modal.on("hide.bs.modal", function () {
                    args.events.onHide();
                });
            }

            if (args.events.onLoaded) {
                $modal.on("loaded.bs.modal", function () {
                    args.events.onLoaded();
                });
            }

            if (args.events.onHidden) {
                $modal.on("hidden.bs.modal", function () {
                    args.events.onHidden();
                });
            }
        }

        //Events from Component
        $modal.on("hidden.bs.modal", function () {
            //destroy on Hide
            $modal.remove();
        });
    };

    return{
        blockScreen: blockScreen,
        blockElement: blockElement,
        unblockScreen: unblockScreen,
        unblockElement: unblockElement,
        showLoading: showLoading,
        hideLoading: hideLoading,
        bindModalEvents: bindModalEvents
    };
})();;
var TerritoryFinder = (function () {
    var args;
    var elements;

    var territoryNames = ["Division", "District", "Tehsil", "QanoonGoi", "PatwarCircle", "Mauza", "Taraf", "Patti"];
    var elementIdentifiers = {
        Divisions: "divisions",
        Districts: "districts",
        Tehsils: "tehsils",
        QanoonGois: "qanoonGois",
        PatwarCircles: "patwarCircles",
        Mauzas: "mauzas",
        Tarafs: "tarafs",
        Pattis: "pattis"
    };
    var storageKeys = {
        divisionId: "UserSelectedTerritoryDivisionId",
        districtId: "UserSelectedTerritoryDistrictId",
        tehsilId: "UserSelectedTerritoryTehsilId",
        qanoonGoiId: "UserSelectedTerritoryQanoonGoiId",
        patwarCircleId: "UserSelectedTerritoryPatwarCircleId",
        mauzaId: "UserSelectedTerritoryMauzaId",
        tarafId: "UserSelectedTerritoryTarafId",
        pattiId: "UserSelectedTerritoryPattiId"
    };

    var setInitialValues = function (initialValues) {
        if (args.useStorage) {
            var keys = Object.keys(initialValues);

            for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                var value = initialValues[key];
                StorageManager.setLocalStorage(storageKeys[key], value);
            }
        }
    };

    var init = function () {
    };

    var loadFilterDropdowns = function (options) {
        args = options;


        if (args.targetElement && args.targetElement.length) {


            UIBlocker.blockScreen();
            //By default TerritoryFinder will use Browser's Storage to save the state.
            args.useStorage = options.useStorage !== false;
            args.useAuthorization = true;
            args.getArchived = typeof args.getArchived != "undefined" ? args.getArchived : false;
            args.urls = {
                getDivisions: Common.urls.baseUrl + "/TerritoryFinder/GetDivisionsByForeignKeyProvinceId",
                getDistricts: Common.urls.baseUrl + "/Data/GetDistrictsByForeignKeyDivisionId",
                getTehsils: Common.urls.baseUrl + "/Data/GetTehsilsByForeignKeyDistrictId",
                getQanoonGois: Common.urls.baseUrl + "/setup/QanoonGoi/GetQanoonGoisByForeignKeyTehsilId",
                getPatwarCircles: Common.urls.baseUrl + "/setup/PatwarCircle/GetPatwarCirclesByForeignKeyQanoonGoiId",
                getMauzas: Common.urls.baseUrl + "/Data/GetMauzasByTehsilId",
                getTarafs: Common.urls.baseUrl + "/setup/Taraf/GetTarafsByForeignKeyMauzaId",
                getPattis: Common.urls.baseUrl + "/setup/Patti/GetPattisByForeignKeyTarafId"
            };
            if (args.initialValues) {
                TerritoryFinder.setInitialValues(args.initialValues);
            }

            var filtersMarkup = "";
            var territoryName;
            for (var i = 0; i <= args.range; i++) {
                var territoryId = i;
                territoryName = territoryNames[i];
                if (territoryId <= territoryNames.length - 1) {
                    if ((args.skipTerritories && args.skipTerritories.indexOf(territoryId) !== -1)) {
                        continue;
                    } else {
                        filtersMarkup = filtersMarkup + "<div class=\"%DropdownClass%\">";
                        filtersMarkup = filtersMarkup + "<label class=\"control-label\">%TerritoryName%</label>";
                        filtersMarkup = filtersMarkup +
                            "<select id=\"%DropdownId%\" class=\"form-control chosen-select chosen-rtl\" %ToolTip%>";
                        filtersMarkup = filtersMarkup +
                            "<option value=\"0\" selected=\"selected\">%PlaceholderText%</option>";
                        filtersMarkup = filtersMarkup + "</select></div>";
                        filtersMarkup = filtersMarkup.replace(/%\w+%/g,
                            function (all) {
                                return {
                                    "%DropdownId%": territoryName[0].toLowerCase() +
                                        territoryName.slice(1, territoryName.length) +
                                        "s",
                                    "%DropdownClass%": "form-group col-sm-3 col-xs-6 dropdownContainer",
                                    "%TerritoryName%": args.messages ? args.messages[territoryName] : territoryName,
                                    "%PlaceholderText%": args.messages ? args.messages["Select"] : "Select",
                                    "%ToolTip%": "title=\"" + "Select an Item" + "\""
                                }[all];
                            });
                    }

                }
            }

            args.targetElement.html(filtersMarkup);

            elements = {
                $divisions: $("#" + elementIdentifiers.Divisions),
                $districts: $("#" + elementIdentifiers.Districts),
                $tehsils: $("#" + elementIdentifiers.Tehsils),
                $qanoonGois: $("#" + elementIdentifiers.QanoonGois),
                $patwarCircles: $("#" + elementIdentifiers.PatwarCircles),
                $mauzas: $("#" + elementIdentifiers.Mauzas),
                $tarafs: $("#" + elementIdentifiers.Tarafs),
                $pattis: $("#" + elementIdentifiers.Pattis)
            };

            elements.$divisions.chosen({ width: "100%" });
            elements.$districts.chosen({ width: "100%" });
            elements.$tehsils.chosen({ width: "100%" });
            elements.$qanoonGois.chosen({ width: "100%" });
            elements.$patwarCircles.chosen({ width: "100%" });
            elements.$mauzas.chosen({ width: "100%" });
            elements.$tarafs.chosen({ width: "100%" });
            elements.$pattis.chosen({ width: "100%" });


            if (args.skipTerritories.indexOf(Common.territoryRangeEnum.Division) >= 0) {
                TerritoryFinder.loadDistrictsDropDown(null);
            } else {
                TerritoryFinder.loadDivisionsDropDown(1);
            }

            UIBlocker.unblockScreen();
        }
    };

    var loadDivisionsDropDown = function (id) {
        UIBlocker.blockScreen();
        $.ajax({
            url: args.urls.getDivisions,
            type: "GET",
            contentType: "application/json; charset=utf-8",
            data: {
                id: id,
                useAuthorization: args.useAuthorization
            },
            cache: false,
            async: true,
            success: function (data) {
                UIBlocker.unblockScreen();
                if (data.OperationStatus) {
                    elements.$divisions.html(MarkupGenerator
                        .generateMarkupForDropDown("divisions",
                            "form-control",
                            data.AdditionalData,
                            "DivisionName",
                            "DivisionId",
                            args.messages.Select,
                            null,
                            true));
                    TerritoryFinder.bindDivisionsDropDownEvents();

                    UIManager.reloadChosenDropdown(elements.$divisions);

                    if (args.useStorage) {
                        var userSelectedId = StorageManager.getLocalStorage(storageKeys.divisionId);
                        if (userSelectedId) {
                            var valueExistInDropdown = elements.$divisions
                                .find("option[value='" + userSelectedId + "']")
                                .length >
                                0;
                            if (valueExistInDropdown) {
                                UIManager.changeChosenDropdownValue(elements.$divisions, userSelectedId);
                            } else {
                                StorageManager.removeLocalStorage(storageKeys.divisionId);
                                StorageManager.removeLocalStorage(storageKeys.districtId);
                                StorageManager.removeLocalStorage(storageKeys.tehsilId);
                                StorageManager.removeLocalStorage(storageKeys.qanoonGoiId);
                                StorageManager.removeLocalStorage(storageKeys.patwarCircleId);
                                StorageManager.removeLocalStorage(storageKeys.mauzaId);
                                StorageManager.removeLocalStorage(storageKeys.tarafId);
                                StorageManager.removeLocalStorage(storageKeys.pattiId);

                            }
                        }
                    }


                } else {
                    UIBlocker.unblockScreen();
                    UIManager.showErrorMessage(data.Message);
                }
            },
            error: function () {
                UIBlocker.unblockScreen();
                UIManager.showErrorMessage(args.messages.ErrorOccurred);
            }
        });
    };

    var loadDistrictsDropDown = function (id) {
        UIBlocker.blockScreen();
        $.ajax({
            url: args.urls.getDistricts,
            type: "GET",
            contentType: "application/json; charset=utf-8",
            data: { id: id, useAuthorization: args.useAuthorization },
            cache: false,
            async: true,
            success: function (data) {
                UIBlocker.unblockScreen();
                if (data.OperationStatus) {
                    elements.$districts.html(MarkupGenerator
                        .generateMarkupForDropDown("districts",
                            "form-control",
                            data.AdditionalData,
                            "DistrictName",
                            "DistrictId",
                            args.messages.Select,
                            null,
                            true));
                    TerritoryFinder.bindDistrictsDropDownEvents();

                    UIManager.reloadChosenDropdown(elements.$districts);
                    if (args.useStorage) {
                        var userSelectedId = StorageManager.getLocalStorage(storageKeys.districtId);
                        if (userSelectedId) {
                            var valueExistInDropdown = elements.$districts
                                .find("option[value='" + userSelectedId + "']")
                                .length >
                                0;
                            if (valueExistInDropdown) {
                                UIManager.changeChosenDropdownValue(elements.$districts, userSelectedId);
                            } else {
                                StorageManager.removeLocalStorage(storageKeys.districtId);
                                StorageManager.removeLocalStorage(storageKeys.tehsilId);
                                StorageManager.removeLocalStorage(storageKeys.qanoonGoiId);
                                StorageManager.removeLocalStorage(storageKeys.patwarCircleId);
                                StorageManager.removeLocalStorage(storageKeys.mauzaId);
                                StorageManager.removeLocalStorage(storageKeys.tarafId);
                                StorageManager.removeLocalStorage(storageKeys.pattiId);
                            }
                        }
                    }


                } else {
                    UIBlocker.unblockScreen();
                    UIManager.showErrorMessage(data.Message);
                }
            },
            error: function () {
                UIBlocker.unblockScreen();
                UIManager.showErrorMessage(args.messages.ErrorOccurred);
            }
        });
    };

    var loadTehsilsDropDown = function (id) {
        UIBlocker.blockScreen();
        $.ajax({
            url: args.urls.getTehsils,
            type: "GET",
            contentType: "application/json; charset=utf-8",
            data: { id: id, useAuthorization: args.useAuthorization },
            cache: false,
            async: true,
            success: function (data) {
                UIBlocker.unblockScreen();
                if (data.OperationStatus) {
                    elements.$tehsils.html(MarkupGenerator
                        .generateMarkupForDropDown("tehsils",
                            "form-control",
                            data.AdditionalData,
                            "TehsilName",
                            "TehsilId",
                            args.messages.Select,
                            null,
                            true));
                    TerritoryFinder.bindTehsilsDropDownEvents();

                    UIManager.reloadChosenDropdown(elements.$tehsils);
                    if (args.useStorage) {
                        var userSelectedId = StorageManager.getLocalStorage(storageKeys.tehsilId);
                        if (userSelectedId) {
                            var valueExistInDropdown = elements.$tehsils.find("option[value='" + userSelectedId + "']")
                                .length >
                                0;
                            if (valueExistInDropdown) {
                                UIManager.changeChosenDropdownValue(elements.$tehsils, userSelectedId);
                            } else {
                                StorageManager.removeLocalStorage(storageKeys.tehsilId);
                                StorageManager.removeLocalStorage(storageKeys.qanoonGoiId);
                                StorageManager.removeLocalStorage(storageKeys.patwarCircleId);
                                StorageManager.removeLocalStorage(storageKeys.mauzaId);
                                StorageManager.removeLocalStorage(storageKeys.tarafId);
                                StorageManager.removeLocalStorage(storageKeys.pattiId);
                            }
                        }
                    }

                } else {
                    UIBlocker.unblockScreen();
                    UIManager.showErrorMessage(data.Message);
                }
            },
            error: function () {
                UIBlocker.unblockScreen();
                UIManager.showErrorMessage(args.messages.ErrorOccurred);
            }
        });
    };

    var loadQanoonGoisDropDown = function (id) {
        UIBlocker.blockScreen();
        $.ajax({
            url: args.urls.getQanoonGois,
            type: "GET",
            contentType: "application/json; charset=utf-8",
            data: { id: id, useAuthorization: args.useAuthorization },
            cache: false,
            async: true,
            success: function (data) {
                UIBlocker.unblockScreen();
                if (data.OperationStatus) {
                    elements.$qanoonGois.html(MarkupGenerator
                        .generateMarkupForDropDown("qanoonGois",
                            "form-control",
                            data.AdditionalData,
                            "QanoonGoiName",
                            "QanoonGoiId",
                            args.messages.Select,
                            null,
                            true));
                    TerritoryFinder.bindQanoonGoisDropDownEvents();

                    UIManager.reloadChosenDropdown(elements.$qanoonGois);
                    if (args.useStorage) {
                        var userSelectedId = StorageManager.getLocalStorage(storageKeys.qanoonGoiId);
                        if (userSelectedId) {
                            var valueExistInDropdown = elements.$qanoonGois
                                .find("option[value='" + userSelectedId + "']")
                                .length >
                                0;
                            if (valueExistInDropdown) {
                                UIManager.changeChosenDropdownValue(elements.$qanoonGois, userSelectedId);
                            } else {
                                StorageManager.removeLocalStorage(storageKeys.qanoonGoiId);
                                StorageManager.removeLocalStorage(storageKeys.patwarCircleId);
                                StorageManager.removeLocalStorage(storageKeys.mauzaId);
                                StorageManager.removeLocalStorage(storageKeys.tarafId);
                                StorageManager.removeLocalStorage(storageKeys.pattiId);
                            }
                        }
                    }

                } else {
                    UIBlocker.unblockScreen();
                    UIManager.showErrorMessage(data.Message);
                }
            },
            error: function () {
                UIBlocker.unblockScreen();
                UIManager.showErrorMessage(args.messages.ErrorOccurred);
            }
        });
    };

    var loadPatwarCirclesDropDown = function (id) {
        UIBlocker.blockScreen();
        $.ajax({
            url: args.urls.getPatwarCircles,
            type: "GET",
            contentType: "application/json; charset=utf-8",
            data: { id: id, useAuthorization: args.useAuthorization },
            cache: false,
            async: true,
            success: function (data) {
                UIBlocker.unblockScreen();
                if (data.OperationStatus) {
                    elements.$patwarCircles.html(MarkupGenerator
                        .generateMarkupForDropDown("patwarCircles",
                            "form-control",
                            data.AdditionalData,
                            "PatwarCircleName",
                            "PatwarCircleId",
                            args.messages.Select,
                            null,
                            true));
                    TerritoryFinder.bindPatwarCirclesDropDownEvents();

                    UIManager.reloadChosenDropdown(elements.$patwarCircles);
                    if (args.useStorage) {
                        var userSelectedId = StorageManager.getLocalStorage(storageKeys.patwarCircleId);
                        if (userSelectedId) {
                            var valueExistInDropdown = elements.$patwarCircles
                                .find("option[value='" + userSelectedId + "']")
                                .length >
                                0;
                            if (valueExistInDropdown) {
                                UIManager.changeChosenDropdownValue(elements.$patwarCircles, userSelectedId);
                            } else {
                                StorageManager.removeLocalStorage(storageKeys.patwarCircleId);
                                StorageManager.removeLocalStorage(storageKeys.mauzaId);
                                StorageManager.removeLocalStorage(storageKeys.tarafId);
                                StorageManager.removeLocalStorage(storageKeys.pattiId);
                            }
                        }
                    }

                } else {
                    UIBlocker.unblockScreen();
                    UIManager.showErrorMessage(data.Message);
                }
            },
            error: function () {
                UIBlocker.unblockScreen();
                UIManager.showErrorMessage(args.messages.ErrorOccurred);
            }
        });
    };

    var loadMauzasDropDown = function (id) {

        var processId = 0;
        if ($("#AllowNonliveVillages").val() == "1" || $("#AllowNonliveVillages").val() == 1) {
            processId = 0;
        } else if ($("#IfNonLiveMauzaAllowed").val() == "-1" || $("#IfNonLiveMauzaAllowed").val() == -1) {
            processId = -1;
        }
        else if (typeof $("#processId").val() != "undefined") {
            processId = $("#processId").val();
        }
        else if (typeof $("#RhzBlockage_ProcessId").val() != "undefined") {
            processId = $("#RhzBlockage_ProcessId").val();
        }
        else if (typeof $("#ProcessId").val() != "undefined") {
            processId = $("#ProcessId").val();
        }

        UIBlocker.blockScreen();
        $.ajax({
            url: args.urls.getMauzas,
            type: "GET",
            contentType: "application/json; charset=utf-8",
            data: { id: id, useAuthorization: args.useAuthorization, getArchived: args.getArchived, processId: processId },
            cache: false,
            async: true,
            success: function (data) {
                UIBlocker.unblockScreen();
                if (data.OperationStatus) {
                    elements.$mauzas.html(MarkupGenerator
                        .generateMarkupForDropDown("mauzas",
                            "form-control",
                            data.AdditionalData,
                            "MauzaName",
                            "MauzaId",
                            args.messages.Select,
                            null,
                            true));
                    TerritoryFinder.bindMauzasDropDownEvents();

                    UIManager.reloadChosenDropdown(elements.$mauzas);
                //    args.onMauzaLoaded();
                    //if (args.useStorage) {
                    //    var userSelectedId = StorageManager.getLocalStorage(storageKeys.mauzaId);
                    //    if (userSelectedId) {
                    //        var valueExistInDropdown = elements.$mauzas
                    //            .find("option[value='" + userSelectedId + "']")
                    //            .length >
                    //            0;
                    //        if (valueExistInDropdown) {
                    //            UIManager.changeChosenDropdownValue(elements.$mauzas, userSelectedId);
                    //        } else {
                    //            StorageManager.removeLocalStorage(storageKeys.mauzaId);
                    //            StorageManager.removeLocalStorage(storageKeys.tarafId);
                    //            StorageManager.removeLocalStorage(storageKeys.pattiId);
                    //        }
                    //    }
                    //}

                } else {
                    UIBlocker.unblockScreen();
                    UIManager.showErrorMessage(data.Message);
                }
            },
            error: function () {
                UIBlocker.unblockScreen();
                UIManager.showErrorMessage(args.messages.ErrorOccurred);
            }
        });
    };

    var loadTarafsDropDown = function (id) {
        UIBlocker.blockScreen();
        if (id > 0) {
            $.ajax({
                url: args.urls.getTarafs,
                type: "GET",
                contentType: "application/json; charset=utf-8",
                data: { id: id, useAuthorization: args.useAuthorization },
                cache: false,
                async: true,
                success: function (data) {
                    UIBlocker.unblockScreen();
                    if (data.OperationStatus) {
                        if (data.AdditionalData.length > 0) {
                            elements.$tarafs.html(MarkupGenerator
                                .generateMarkupForDropDown("tarafs",
                                    "form-control",
                                    data.AdditionalData,
                                    "TarafName",
                                    "TarafId",
                                    args.messages.Select,
                                    null,
                                    true));
                            TerritoryFinder.bindTarafsDropDownEvents();

                            UIManager.reloadChosenDropdown(elements.$tarafs);

                            UIManager.changeElementVisibility(elements.$tarafs.closest(".dropdownContainer"), true);
                            UIManager.changeElementVisibility(elements.$pattis.closest(".dropdownContainer"), true);
                            if (args.useStorage) {
                                var userSelectedId = StorageManager.getLocalStorage(storageKeys.tarafId);
                                if (userSelectedId) {
                                    var valueExistInDropdown = elements.$tarafs
                                        .find("option[value='" + userSelectedId + "']")
                                        .length >
                                        0;
                                    if (valueExistInDropdown) {
                                        UIManager.changeChosenDropdownValue(elements.$tarafs, userSelectedId);
                                    } else {
                                        StorageManager.removeLocalStorage(storageKeys.tarafId);
                                        StorageManager.removeLocalStorage(storageKeys.pattiId);
                                    }
                                }
                            }

                        } else {
                            UIManager.changeElementVisibility(elements.$tarafs.closest(".dropdownContainer"), false);
                            UIManager.changeElementVisibility(elements.$pattis.closest(".dropdownContainer"), false);
                        }

                    } else {
                        UIBlocker.unblockScreen();
                        UIManager.showErrorMessage(data.Message);
                    }
                },
                error: function () {
                    UIBlocker.unblockScreen();
                    UIManager.showErrorMessage(args.messages.ErrorOccurred);
                }
            });
        } else {
            UIManager.changeElementVisibility(elements.$tarafs.closest(".dropdownContainer"), true);
            UIManager.changeElementVisibility(elements.$pattis.closest(".dropdownContainer"), true);
        }
    };

    var loadPattisDropDown = function (id) {
        if (id > 0) {
            UIBlocker.blockScreen();
            $.ajax({
                url: args.urls.getPattis,
                type: "GET",
                contentType: "application/json; charset=utf-8",
                data: { id: id, useAuthorization: args.useAuthorization },
                cache: false,
                async: true,
                success: function (data) {
                    UIBlocker.unblockScreen();
                    if (data.OperationStatus) {
                        if (data.AdditionalData.length > 0) {
                            elements.$pattis.html(MarkupGenerator
                                .generateMarkupForDropDown("pattis",
                                    "form-control",
                                    data.AdditionalData,
                                    "PattiName",
                                    "PattiId",
                                    args.messages.Select,
                                    null,
                                    true));
                            TerritoryFinder.bindPattisDropDownEvents();

                            UIManager.reloadChosenDropdown(elements.$pattis);

                            UIManager.changeElementVisibility(elements.$pattis.closest(".dropdownContainer"), true);
                            if (args.useStorage) {
                                var userSelectedId = StorageManager.getLocalStorage(storageKeys.pattiId);
                                if (userSelectedId) {
                                    var valueExistInDropdown = elements.$pattis
                                        .find("option[value='" + userSelectedId + "']")
                                        .length >
                                        0;
                                    if (valueExistInDropdown) {
                                        UIManager.changeChosenDropdownValue(elements.$pattis, userSelectedId);
                                    } else {
                                        StorageManager.removeLocalStorage(storageKeys.pattiId);
                                    }
                                }
                            }


                        } else {

                            UIManager.changeElementVisibility(elements.$pattis.closest(".dropdownContainer"), false);
                        }

                    } else {
                        UIBlocker.unblockScreen();
                        UIManager.showErrorMessage(data.Message);
                    }
                },
                error: function () {
                    UIBlocker.unblockScreen();
                    UIManager.showErrorMessage(args.messages.ErrorOccurred);
                }
            });
        } else {
            UIManager.changeElementVisibility(elements.$pattis.closest(".dropdownContainer"), true);
        }
    };

    var bindDivisionsDropDownEvents = function () {
        elements.$divisions.off()
            .on("change",
                function () {
                    MarkupGenerator.clearOptionsForDropDown(elements.$districts, true);
                    MarkupGenerator.clearOptionsForDropDown(elements.$tehsils, true);
                    MarkupGenerator.clearOptionsForDropDown(elements.$qanoonGois, true);
                    MarkupGenerator.clearOptionsForDropDown(elements.$patwarCircles, true);
                    MarkupGenerator.clearOptionsForDropDown(elements.$mauzas, true);
                    MarkupGenerator.clearOptionsForDropDown(elements.$tarafs, true);
                    MarkupGenerator.clearOptionsForDropDown(elements.$pattis, true);

                    UIManager.reloadChosenDropdown(elements.$districts);
                    UIManager.reloadChosenDropdown(elements.$tehsils);
                    UIManager.reloadChosenDropdown(elements.$qanoonGois);
                    UIManager.reloadChosenDropdown(elements.$patwarCircles);
                    UIManager.reloadChosenDropdown(elements.$mauzas);
                    UIManager.reloadChosenDropdown(elements.$tarafs);
                    UIManager.reloadChosenDropdown(elements.$pattis);

                    if (args.useStorage) {
                        if (elements.$divisions.val() && elements.$divisions.val() > 0) {
                            StorageManager.setLocalStorage(storageKeys.divisionId, elements.$divisions.val());
                        } else {
                            StorageManager.removeLocalStorage(storageKeys.divisionId);
                            StorageManager.removeLocalStorage(storageKeys.districtId);
                            StorageManager.removeLocalStorage(storageKeys.tehsilId);
                            StorageManager.removeLocalStorage(storageKeys.qanoonGoiId);
                            StorageManager.removeLocalStorage(storageKeys.patwarCircleId);
                            StorageManager.removeLocalStorage(storageKeys.mauzaId);
                            StorageManager.removeLocalStorage(storageKeys.tarafId);
                            StorageManager.removeLocalStorage(storageKeys.pattiId);
                        }
                    }


                    if (args.range >= Common.territoryRangeEnum.DivisionToDistrict &&
                        elements.$divisions.val() &&
                        elements.$divisions.val() > 0) {
                        TerritoryFinder.loadDistrictsDropDown(elements.$divisions.val());
                    } else {
                        UIManager.changeElementVisibility(elements.$tarafs.closest(".dropdownContainer"), true);
                        UIManager.changeElementVisibility(elements.$pattis.closest(".dropdownContainer"), true);
                    }

                    if (args.onEachChange) {
                        args.onEachChange();
                    }
                });
    };

    var bindDistrictsDropDownEvents = function () {
        elements.$districts.off()
            .on("change",
                function () {
                    MarkupGenerator.clearOptionsForDropDown(elements.$tehsils, true);
                    MarkupGenerator.clearOptionsForDropDown(elements.$qanoonGois, true);
                    MarkupGenerator.clearOptionsForDropDown(elements.$patwarCircles, true);
                    MarkupGenerator.clearOptionsForDropDown(elements.$mauzas, true);
                    MarkupGenerator.clearOptionsForDropDown(elements.$tarafs, true);
                    MarkupGenerator.clearOptionsForDropDown(elements.$pattis, true);


                    UIManager.reloadChosenDropdown(elements.$tehsils);
                    UIManager.reloadChosenDropdown(elements.$qanoonGois);
                    UIManager.reloadChosenDropdown(elements.$patwarCircles);
                    UIManager.reloadChosenDropdown(elements.$mauzas);
                    UIManager.reloadChosenDropdown(elements.$tarafs);
                    UIManager.reloadChosenDropdown(elements.$pattis);

                    if (args.useStorage) {
                        if (elements.$districts.val() && elements.$districts.val() > 0) {
                            StorageManager.setLocalStorage(storageKeys.districtId, elements.$districts.val());
                        } else {
                            StorageManager.removeLocalStorage(storageKeys.districtId);
                            StorageManager.removeLocalStorage(storageKeys.tehsilId);
                            StorageManager.removeLocalStorage(storageKeys.qanoonGoiId);
                            StorageManager.removeLocalStorage(storageKeys.patwarCircleId);
                            StorageManager.removeLocalStorage(storageKeys.mauzaId);
                            StorageManager.removeLocalStorage(storageKeys.tarafId);
                            StorageManager.removeLocalStorage(storageKeys.pattiId);
                        }
                    }


                    if (args
                        .range >=
                        Common.territoryRangeEnum.DivisionToTehsil &&
                        elements.$districts.val() &&
                        elements.$districts.val() > 0) {
                        TerritoryFinder.loadTehsilsDropDown(elements.$districts.val());
                    } else {
                        UIManager.changeElementVisibility(elements.$tarafs.closest(".dropdownContainer"), true);
                        UIManager.changeElementVisibility(elements.$pattis.closest(".dropdownContainer"), true);
                    }

                    if (args.onEachChange) {
                        args.onEachChange();
                    }
                });
    };

    var bindTehsilsDropDownEvents = function () {

        elements.$tehsils.off()
            .on("change",
                function () {
                    MarkupGenerator.clearOptionsForDropDown(elements.$qanoonGois, true);
                    MarkupGenerator.clearOptionsForDropDown(elements.$patwarCircles, true);
                    MarkupGenerator.clearOptionsForDropDown(elements.$mauzas, true);
                    MarkupGenerator.clearOptionsForDropDown(elements.$tarafs, true);
                    MarkupGenerator.clearOptionsForDropDown(elements.$pattis, true);

                    UIManager.reloadChosenDropdown(elements.$qanoonGois);
                    UIManager.reloadChosenDropdown(elements.$patwarCircles);
                    UIManager.reloadChosenDropdown(elements.$mauzas);
                    UIManager.reloadChosenDropdown(elements.$tarafs);
                    UIManager.reloadChosenDropdown(elements.$pattis);

                    if (args.useStorage) {
                        if (elements.$tehsils.val() && elements.$tehsils.val() > 0) {
                            StorageManager.setLocalStorage(storageKeys.tehsilId, elements.$tehsils.val());
                        } else {
                            StorageManager.removeLocalStorage(storageKeys.tehsilId);
                            StorageManager.removeLocalStorage(storageKeys.qanoonGoiId);
                            StorageManager.removeLocalStorage(storageKeys.patwarCircleId);
                            StorageManager.removeLocalStorage(storageKeys.mauzaId);
                            StorageManager.removeLocalStorage(storageKeys.tarafId);
                            StorageManager.removeLocalStorage(storageKeys.pattiId);
                        }
                    }


                    if (args
                        .range >=
                        Common.territoryRangeEnum.DivisionToQanoonGoi &&
                        elements.$tehsils.val() &&
                        elements.$tehsils.val() > 0) {

                        if (args.skipTerritories.indexOf(Common.territoryRangeEnum.QanoonGoi) >= 0) {
                            if (args.skipTerritories.indexOf(Common.territoryRangeEnum.PatwarCircle) >= 0) {
                                TerritoryFinder.loadMauzasDropDown(elements.$tehsils.val());
                            }
                        } else {
                            TerritoryFinder.loadQanoonGoisDropDown(elements.$tehsils.val());
                        }

                    } else {
                        UIManager.changeElementVisibility(elements.$tarafs.closest(".dropdownContainer"), true);
                        UIManager.changeElementVisibility(elements.$pattis.closest(".dropdownContainer"), true);
                    }

                    if (args.onEachChange) {
                        args.onEachChange();
                    }
                });
    };

    var bindQanoonGoisDropDownEvents = function () {
        elements.$qanoonGois.off()
            .on("change",
                function () {
                    MarkupGenerator.clearOptionsForDropDown(elements.$patwarCircles, true);
                    MarkupGenerator.clearOptionsForDropDown(elements.$mauzas, true);
                    MarkupGenerator.clearOptionsForDropDown(elements.$tarafs, true);
                    MarkupGenerator.clearOptionsForDropDown(elements.$pattis, true);

                    UIManager.reloadChosenDropdown(elements.$patwarCircles);
                    UIManager.reloadChosenDropdown(elements.$mauzas);
                    UIManager.reloadChosenDropdown(elements.$tarafs);
                    UIManager.reloadChosenDropdown(elements.$pattis);

                    if (args.useStorage) {
                        if (elements.$qanoonGois.val() && elements.$qanoonGois.val() > 0) {
                            StorageManager.setLocalStorage(storageKeys.qanoonGoiId, elements.$qanoonGois.val());
                        } else {
                            StorageManager.removeLocalStorage(storageKeys.qanoonGoiId);
                            StorageManager.removeLocalStorage(storageKeys.patwarCircleId);
                            StorageManager.removeLocalStorage(storageKeys.mauzaId);
                            StorageManager.removeLocalStorage(storageKeys.tarafId);
                            StorageManager.removeLocalStorage(storageKeys.pattiId);
                        }
                    }


                    if (args.range >= Common.territoryRangeEnum.DivisionToPatwarCircle &&
                        elements.$qanoonGois.val() &&
                        elements.$qanoonGois.val() > 0) {
                        TerritoryFinder.loadPatwarCirclesDropDown(elements.$qanoonGois.val());
                    } else {
                        UIManager.changeElementVisibility(elements.$tarafs.closest(".dropdownContainer"), true);
                        UIManager.changeElementVisibility(elements.$pattis.closest(".dropdownContainer"), true);
                    }

                    if (args.onEachChange) {
                        args.onEachChange();
                    }
                });
    };

    var bindPatwarCirclesDropDownEvents = function () {
        elements.$patwarCircles.off()
            .on("change",
                function () {
                    MarkupGenerator.clearOptionsForDropDown(elements.$mauzas, true);
                    MarkupGenerator.clearOptionsForDropDown(elements.$tarafs, true);
                    MarkupGenerator.clearOptionsForDropDown(elements.$pattis, true);


                    UIManager.reloadChosenDropdown(elements.$mauzas);
                    UIManager.reloadChosenDropdown(elements.$tarafs);
                    UIManager.reloadChosenDropdown(elements.$pattis);

                    if (args.useStorage) {
                        if (elements.$patwarCircles.val() && elements.$patwarCircles.val() > 0) {
                            StorageManager.setLocalStorage(storageKeys.patwarCircleId, elements.$patwarCircles.val());
                        } else {
                            StorageManager.removeLocalStorage(storageKeys.patwarCircleId);
                            StorageManager.removeLocalStorage(storageKeys.mauzaId);
                            StorageManager.removeLocalStorage(storageKeys.tarafId);
                            StorageManager.removeLocalStorage(storageKeys.pattiId);
                        }
                    }


                    if (args.range >= Common.territoryRangeEnum.DivisionToMauza &&
                        elements.$patwarCircles.val() &&
                        elements.$patwarCircles.val() > 0) {
                        TerritoryFinder.loadMauzasDropDown(elements.$patwarCircles.val());
                    } else {
                        UIManager.changeElementVisibility(elements.$tarafs.closest(".dropdownContainer"), true);
                        UIManager.changeElementVisibility(elements.$pattis.closest(".dropdownContainer"), true);
                    }

                    if (args.onEachChange) {
                        args.onEachChange();
                    }
                });
    };

    var bindMauzasDropDownEvents = function () {
        elements.$mauzas.off()
            .on("change",
                function () {

                    MarkupGenerator.clearOptionsForDropDown(elements.$tarafs, true);
                    MarkupGenerator.clearOptionsForDropDown(elements.$pattis, true);

                    UIManager.reloadChosenDropdown(elements.$tarafs);
                    UIManager.reloadChosenDropdown(elements.$pattis);

                    if (args.useStorage) {
                        if (elements.$mauzas.val() && elements.$mauzas.val() > 0) {
                            StorageManager.setLocalStorage(storageKeys.mauzaId, elements.$mauzas.val());
                        } else {
                            StorageManager.removeLocalStorage(storageKeys.mauzaId);
                            StorageManager.removeLocalStorage(storageKeys.tarafId);
                            StorageManager.removeLocalStorage(storageKeys.pattiId);
                        }
                    }


                    if (args.range >= Common.territoryRangeEnum.DivisionToTaraf &&
                        elements.$mauzas.val() &&
                        elements.$mauzas.val() > 0) {
                        TerritoryFinder.loadTarafsDropDown(elements.$mauzas.val());
                    } else {
                        UIManager.changeElementVisibility(elements.$tarafs.closest(".dropdownContainer"), true);
                        UIManager.changeElementVisibility(elements.$pattis.closest(".dropdownContainer"), true);
                    }

                    if (args.onEachChange) {
                        args.onEachChange();
                    }
                });
    };

    var bindTarafsDropDownEvents = function () {
        elements.$tarafs.on("change",
            function () {
                MarkupGenerator.clearOptionsForDropDown(elements.$pattis, true);
                UIManager.reloadChosenDropdown(elements.$pattis);

                if (args.useStorage) {
                    if (elements.$tarafs.val() && elements.$tarafs.val() > 0) {
                        StorageManager.setLocalStorage(storageKeys.tarafId, elements.$tarafs.val());
                    } else {
                        StorageManager.removeLocalStorage(storageKeys.tarafId);
                        StorageManager.removeLocalStorage(storageKeys.pattiId);
                    }
                }


                if (args.range >= Common.territoryRangeEnum.DivisionToPatti &&
                    elements.$tarafs.val() &&
                    elements.$tarafs.val() > 0) {
                    TerritoryFinder.loadPattisDropDown(elements.$tarafs.val());
                } else {
                    UIManager.changeElementVisibility(elements.$pattis.closest(".dropdownContainer"), true);
                }

                if (args.onEachChange) {
                    args.onEachChange();
                }
            });
    };

    var bindPattisDropDownEvents = function () {
        elements.$pattis.off()
            .on("change",
                function () {
                    if (args.useStorage) {
                        if (elements.$pattis.val() && elements.$pattis.val() > 0) {
                            StorageManager.setLocalStorage(storageKeys.pattiId, elements.$pattis.val());
                        } else {
                            StorageManager.removeLocalStorage(storageKeys.pattiId);
                        }
                    }

                    if (args.onEachChange) {
                        args.onEachChange();
                    }
                });
    };

    var getSelectedItemId = function (territoryTypeId) {
        var value;
        switch (territoryTypeId) {
            case Common.territoryRangeEnum.Division:
                value = elements.$divisions.val();
                break;
            case Common.territoryRangeEnum.District:
                value = elements.$districts.val();
                break;
            case Common.territoryRangeEnum.Tehsil:
                value = elements.$tehsils.val();
                break;
            case Common.territoryRangeEnum.QanoonGoi:
                value = elements.$qanoonGois.val();
                break;
            case Common.territoryRangeEnum.PatwarCircle:
                value = elements.$patwarCircles.val();
                break;
            case Common.territoryRangeEnum.Mauza:
                value = elements.$mauzas.val();
                break;
            case Common.territoryRangeEnum.Taraf:
                value = elements.$tarafs.val();
                break;
            case Common.territoryRangeEnum.Patti:
                value = elements.$pattis.val();
                break;

            default:
                value = null;
                break;
        }

        return parseInt(value);
    };

    var setDefaultValues = function (data) {
        args.useStorage = true;
        UIManager.changeChosenDropdownValue(elements.$divisions, data.DivisionId);
        // UIManager.changeChosenDropdownValue(elements.$districts, data.DistrictId);
        StorageManager.setLocalStorage(storageKeys.divisionId, data.DivisionId);
        StorageManager.setLocalStorage(storageKeys.districtId, data.DistrictId);
        StorageManager.setLocalStorage(storageKeys.tehsilId, data.TehsilId);


    }

    return {
        init: init,
        loadFilterDropdowns: loadFilterDropdowns,
        loadDivisionsDropDown: loadDivisionsDropDown,
        loadDistrictsDropDown: loadDistrictsDropDown,
        loadTehsilsDropDown: loadTehsilsDropDown,
        loadQanoonGoisDropDown: loadQanoonGoisDropDown,
        loadPatwarCirclesDropDown: loadPatwarCirclesDropDown,
        loadMauzasDropDown: loadMauzasDropDown,
        loadTarafsDropDown: loadTarafsDropDown,
        loadPattisDropDown: loadPattisDropDown,
        setInitialValues: setInitialValues,
        bindDivisionsDropDownEvents: bindDivisionsDropDownEvents,
        bindDistrictsDropDownEvents: bindDistrictsDropDownEvents,
        bindTehsilsDropDownEvents: bindTehsilsDropDownEvents,
        bindQanoonGoisDropDownEvents: bindQanoonGoisDropDownEvents,
        bindPatwarCirclesDropDownEvents: bindPatwarCirclesDropDownEvents,
        bindMauzasDropDownEvents: bindMauzasDropDownEvents,
        bindTarafsDropDownEvents: bindTarafsDropDownEvents,
        bindPattisDropDownEvents: bindPattisDropDownEvents,
        getSelectedItemId: getSelectedItemId,
        setDefaultValues: setDefaultValues
    };
})();

$(document)
    .ready(function () {

    });;

var VKI_attach, VKI_close;
(function () {
    var self = this;

    this.VKI_version = "1.49";
    this.VKI_showVersion = false;
    this.VKI_target = false;
    this.VKI_shift = this.VKI_shiftlock = false;
    this.VKI_altgr = this.VKI_altgrlock = false;
    this.VKI_dead = false;
    this.VKI_deadBox = true; // Show the dead keys checkbox
    this.VKI_deadkeysOn = false;  // Turn dead keys on by default
    this.VKI_numberPad = true;  // Allow user to open and close the number pad
    this.VKI_numberPadOn = false;  // Show number pad by default
    this.VKI_kts = this.VKI_kt = "\u0627\u0631\u062f\u0648 Phonetic";  // Default keyboard layout
    this.VKI_langAdapt = true;  // Use lang attribute of input to select keyboard
    this.VKI_size = 3;  // Default keyboard size (1-5)
    this.VKI_sizeAdj = true;  // Allow user to adjust keyboard size
    this.VKI_clearPasswords = false;  // Clear password fields on focus
    this.VKI_imageURI = ".././Images/Client/keyboard-green.png";  // If empty string, use imageless mode
    this.VKI_clickless = 0;  // 0 = disabled, > 0 = delay in ms
    this.VKI_activeTab = 0;  // Tab moves to next: 1 = element, 2 = keyboard enabled element
    this.VKI_enterSubmit = true;  // Submit forms when Enter is pressed
    this.VKI_keyCenter = 3;

    this.VKI_isIE = /*@cc_on!@*/false;
    this.VKI_isIE6 = /*@if(@_jscript_version == 5.6)!@end@*/false;
    this.VKI_isIElt8 = /*@if(@_jscript_version < 5.8)!@end@*/false;
    this.VKI_isWebKit = RegExp("KHTML").test(navigator.userAgent);
    this.VKI_isOpera = RegExp("Opera").test(navigator.userAgent);
    this.VKI_isMoz = (!this.VKI_isWebKit && navigator.product == "Gecko");

    /* ***** i18n text strings ************************************* */
    this.VKI_i18n = {
        '00': "Display Number Pad",
        '01': "Display virtual keyboard interface",
        '02': "Select keyboard layout",
        '03': "Dead keys",
        '04': "On",
        '05': "Off",
        '06': "Close the keyboard",
        '07': "Clear",
        '08': "Clear this input",
        '09': "Version",
        '10': "Decrease keyboard size",
        '11': "Increase keyboard size"
    };


    /* ***** Create keyboards ************************************** */
    this.VKI_layout = {};

    // - Lay out each keyboard in rows of sub-arrays.  Each sub-array
    //   represents one key.
    //
    // - Each sub-array consists of four slots described as follows:
    //     example: ["a", "A", "\u00e1", "\u00c1"]
    //
    //          a) Normal character
    //          A) Character + Shift/Caps
    //     \u00e1) Character + Alt/AltGr/AltLk
    //     \u00c1) Character + Shift/Caps + Alt/AltGr/AltLk
    //
    //   You may include sub-arrays which are fewer than four slots.
    //   In these cases, the missing slots will be blanked when the
    //   corresponding modifier key (Shift or AltGr) is pressed.
    //
    // - If the second slot of a sub-array matches one of the following
    //   strings:
    //     "Tab", "Caps", "Shift", "Enter", "Bksp",
    //     "Alt" OR "AltGr", "AltLk"
    //   then the function of the key will be the following,
    //   respectively:
    //     - Insert a tab
    //     - Toggle Caps Lock (technically a Shift Lock)
    //     - Next entered character will be the shifted character
    //     - Insert a newline (textarea), or close the keyboard
    //     - Delete the previous character
    //     - Next entered character will be the alternate character
    //     - Toggle Alt/AltGr Lock
    //
    //   The first slot of this sub-array will be the text to display
    //   on the corresponding key.  This allows for easy localisation
    //   of key names.
    //
    // - Layout dead keys (diacritic + letter) should be added as
    //   property/value pairs of objects with hash keys equal to the
    //   diacritic.  See the "this.VKI_deadkey" object below the layout
    //   definitions.  In each property/value pair, the value is what
    //   the diacritic would change the property name to.
    //
    // - Note that any characters beyond the normal ASCII set should be
    //   entered in escaped Unicode format.  (eg \u00a3 = Pound symbol)
    //   You can find Unicode values for characters here:
    //     http://unicode.org/charts/
    //
    // - To remove a keyboard, just delete it, or comment it out of the
    //   source code. If you decide to remove the US International
    //   keyboard layout, make sure you change the default layout
    //   (this.VKI_kt) above so it references an existing layout.


    this.VKI_layout['\u0627\u0631\u062f\u0648'] = {
        'name': "Urdu", 'keys': [
          [["`", "~"], ["1", "!"], ["2", "@"], ["3", "#"], ["4", "$"], ["5", "\u066A"], ["6", "^"], ["7", "\u06D6"], ["8", "\u066D"], ["9", ")"], ["0", "("], ["-", "_"], ["=", "+"], ["Bksp", "Bksp"]],
          [["Tab", "Tab"], ["\u0637", "\u0638"], ["\u0635", "\u0636"], ["\u06be", "\u0630"], ["\u062f", "\u0688"], ["\u0679", "\u062B"], ["\u067e", "\u0651"], ["\u062a", "\u06C3"], ["\u0628", "\u0640"], ["\u062c", "\u0686"], ["\u062d", "\u062E"], ["]", "}"], ["[", "{"], ["\\", "|"]],
          [["Caps", "Caps"], ["\u0645", "\u0698"], ["\u0648", "\u0632"], ["\u0631", "\u0691"], ["\u0646", "\u06BA"], ["\u0644", "\u06C2"], ["\u06c1", "\u0621"], ["\u0627", "\u0622"], ["\u06A9", "\u06AF"], ["\u06CC", "\u064A"], ["\u061b", ":"], ["'", '"'], ["Enter", "Enter"]],
          [["Shift", "Shift"], ["\u0642", "\u200D"], ["\u0641", "\u200C"], ["\u06D2", "\u06D3"], ["\u0633", "\u200E"], ["\u0634", "\u0624"], ["\u063a", "\u0626"], ["\u0639", "\u200F"], ["\u060C", ">"], ["\u06D4", "<"], ["/", "\u061F"], ["Shift", "Shift"]],
          [[" ", " "]]
        ], 'lang': ["ur"]
    };

    this.VKI_layout['\u0627\u0631\u062f\u0648 Phonetic'] = {
        'name': "Urdu Phonetic", 'keys': [
          [["\u064D", "\u064B", "~"], ["\u06F1", "1", "!"], ["\u06F2", "2", "@"], ["\u06F3", "3", "#"], ["\u06F4", "4", "$"], ["\u06F5", "5", "\u066A"], ["\u06F6", "6", "^"], ["\u06F7", "7", "&"], ["\u06F8", "8", "*"], ["\u06F9", "9", "("], ["\u06F0", "0", ")"], ["-", "_"], ["=", "+"], ["Bksp", "Bksp"]],
          [["Tab", "Tab"], ["\u0642", "\u0652"], ["\u0648", "\u0651", "\u0602"], ["\u0639", "\u0670", "\u0656"], ["\u0631", "\u0691", "\u0613"], ["\u062A", "\u0679", "\u0614"], ["\u06D2", "\u064E", "\u0601"], ["\u0621", "\u0626", "\u0654"], ["\u06CC", "\u0650", "\u0611"], ["\u06C1", "\u06C3"], ["\u067E", "\u064F", "\u0657"], ["[", "{"], ["]", "}"], ["\\", "|"]],
          [["Caps", "Caps"], ["\u0627", "\u0622", "\uFDF2"], ["\u0633", "\u0635", "\u0610"], ["\u062F", "\u0688", "\uFDFA"], ["\u0641"], ["\u06AF", "\u063A"], ["\u062D", "\u06BE", "\u0612"], ["\u062C", "\u0636", "\uFDFB"], ["\u06A9", "\u062E"], ["\u0644"], ["\u061B", ":"], ["'", '"'], ["Enter", "Enter"]],
          [["Shift", "Shift"], ["\u0632", "\u0630", "\u060F"], ["\u0634", "\u0698", "\u060E"], ["\u0686", "\u062B", "\u0603"], ["\u0637", "\u0638"], ["\u0628", "", "\uFDFD"], ["\u0646", "\u06BA", "\u0600"], ["\u0645", "\u0658"], ["\u060C", "", "<"], ["\u06D4", "\u066B", ">"], ["/", "\u061F"], ["Shift", "Shift"]],
          [[" ", " ", " ", " "], ["Alt", "Alt"]]
        ]
    };







    /* ***** Define Dead Keys ************************************** */
    this.VKI_deadkey = {};

    // - Lay out each dead key set as an object of property/value
    //   pairs.  The rows below are wrapped so uppercase letters are
    //   below their lowercase equivalents.
    //
    // - The property name is the letter pressed after the diacritic.
    //   The property value is the letter this key-combo will generate.
    //
    // - Note that if you have created a new keyboard layout and want
    //   it included in the distributed script, PLEASE TELL ME if you
    //   have added additional dead keys to the ones below.

    this.VKI_deadkey['"'] = this.VKI_deadkey['\u00a8'] = this.VKI_deadkey['\u309B'] = { // Umlaut / Diaeresis / Greek Dialytika / Hiragana/Katakana Voiced Sound Mark
        'a': "\u00e4", 'e': "\u00eb", 'i': "\u00ef", 'o': "\u00f6", 'u': "\u00fc", 'y': "\u00ff", '\u03b9': "\u03ca", '\u03c5': "\u03cb", '\u016B': "\u01D6", '\u00FA': "\u01D8", '\u01D4': "\u01DA", '\u00F9': "\u01DC",
        'A': "\u00c4", 'E': "\u00cb", 'I': "\u00cf", 'O': "\u00d6", 'U': "\u00dc", 'Y': "\u0178", '\u0399': "\u03aa", '\u03a5': "\u03ab", '\u016A': "\u01D5", '\u00DA': "\u01D7", '\u01D3': "\u01D9", '\u00D9': "\u01DB",
        '\u304b': "\u304c", '\u304d': "\u304e", '\u304f': "\u3050", '\u3051': "\u3052", '\u3053': "\u3054", '\u305f': "\u3060", '\u3061': "\u3062", '\u3064': "\u3065", '\u3066': "\u3067", '\u3068': "\u3069",
        '\u3055': "\u3056", '\u3057': "\u3058", '\u3059': "\u305a", '\u305b': "\u305c", '\u305d': "\u305e", '\u306f': "\u3070", '\u3072': "\u3073", '\u3075': "\u3076", '\u3078': "\u3079", '\u307b': "\u307c",
        '\u30ab': "\u30ac", '\u30ad': "\u30ae", '\u30af': "\u30b0", '\u30b1': "\u30b2", '\u30b3': "\u30b4", '\u30bf': "\u30c0", '\u30c1': "\u30c2", '\u30c4': "\u30c5", '\u30c6': "\u30c7", '\u30c8': "\u30c9",
        '\u30b5': "\u30b6", '\u30b7': "\u30b8", '\u30b9': "\u30ba", '\u30bb': "\u30bc", '\u30bd': "\u30be", '\u30cf': "\u30d0", '\u30d2': "\u30d3", '\u30d5': "\u30d6", '\u30d8': "\u30d9", '\u30db': "\u30dc"
    };
    this.VKI_deadkey['~'] = { // Tilde / Stroke
        'a': "\u00e3", 'l': "\u0142", 'n': "\u00f1", 'o': "\u00f5",
        'A': "\u00c3", 'L': "\u0141", 'N': "\u00d1", 'O': "\u00d5"
    };
    this.VKI_deadkey['^'] = { // Circumflex
        'a': "\u00e2", 'e': "\u00ea", 'i': "\u00ee", 'o': "\u00f4", 'u': "\u00fb", 'w': "\u0175", 'y': "\u0177",
        'A': "\u00c2", 'E': "\u00ca", 'I': "\u00ce", 'O': "\u00d4", 'U': "\u00db", 'W': "\u0174", 'Y': "\u0176"
    };
    this.VKI_deadkey['\u02c7'] = { // Baltic caron
        'c': "\u010D", 'd': "\u010f", 'e': "\u011b", 's': "\u0161", 'l': "\u013e", 'n': "\u0148", 'r': "\u0159", 't': "\u0165", 'u': "\u01d4", 'z': "\u017E", '\u00fc': "\u01da",
        'C': "\u010C", 'D': "\u010e", 'E': "\u011a", 'S': "\u0160", 'L': "\u013d", 'N': "\u0147", 'R': "\u0158", 'T': "\u0164", 'U': "\u01d3", 'Z': "\u017D", '\u00dc': "\u01d9"
    };
    this.VKI_deadkey['\u02d8'] = { // Romanian and Turkish breve
        'a': "\u0103", 'g': "\u011f",
        'A': "\u0102", 'G': "\u011e"
    };
    this.VKI_deadkey['-'] = this.VKI_deadkey['\u00af'] = { // Macron
        'a': "\u0101", 'e': "\u0113", 'i': "\u012b", 'o': "\u014d", 'u': "\u016B", 'y': "\u0233", '\u00fc': "\u01d6",
        'A': "\u0100", 'E': "\u0112", 'I': "\u012a", 'O': "\u014c", 'U': "\u016A", 'Y': "\u0232", '\u00dc': "\u01d5"
    };
    this.VKI_deadkey['`'] = { // Grave
        'a': "\u00e0", 'e': "\u00e8", 'i': "\u00ec", 'o': "\u00f2", 'u': "\u00f9", '\u00fc': "\u01dc",
        'A': "\u00c0", 'E': "\u00c8", 'I': "\u00cc", 'O': "\u00d2", 'U': "\u00d9", '\u00dc': "\u01db"
    };
    this.VKI_deadkey["'"] = this.VKI_deadkey['\u00b4'] = this.VKI_deadkey['\u0384'] = { // Acute / Greek Tonos
        'a': "\u00e1", 'e': "\u00e9", 'i': "\u00ed", 'o': "\u00f3", 'u': "\u00fa", 'y': "\u00fd", '\u03b1': "\u03ac", '\u03b5': "\u03ad", '\u03b7': "\u03ae", '\u03b9': "\u03af", '\u03bf': "\u03cc", '\u03c5': "\u03cd", '\u03c9': "\u03ce", '\u00fc': "\u01d8",
        'A': "\u00c1", 'E': "\u00c9", 'I': "\u00cd", 'O': "\u00d3", 'U': "\u00da", 'Y': "\u00dd", '\u0391': "\u0386", '\u0395': "\u0388", '\u0397': "\u0389", '\u0399': "\u038a", '\u039f': "\u038c", '\u03a5': "\u038e", '\u03a9': "\u038f", '\u00dc': "\u01d7"
    };
    this.VKI_deadkey['\u02dd'] = { // Hungarian Double Acute Accent
        'o': "\u0151", 'u': "\u0171",
        'O': "\u0150", 'U': "\u0170"
    };
    this.VKI_deadkey['\u0385'] = { // Greek Dialytika + Tonos
        '\u03b9': "\u0390", '\u03c5': "\u03b0"
    };
    this.VKI_deadkey['\u00b0'] = this.VKI_deadkey['\u00ba'] = { // Ring
        'a': "\u00e5", 'u': "\u016f",
        'A': "\u00c5", 'U': "\u016e"
    };
    this.VKI_deadkey['\u02DB'] = { // Ogonek
        'a': "\u0106", 'e': "\u0119", 'i': "\u012f", 'o': "\u01eb", 'u': "\u0173", 'y': "\u0177",
        'A': "\u0105", 'E': "\u0118", 'I': "\u012e", 'O': "\u01ea", 'U': "\u0172", 'Y': "\u0176"
    };
    this.VKI_deadkey['\u02D9'] = { // Dot-above
        'c': "\u010B", 'e': "\u0117", 'g': "\u0121", 'z': "\u017C",
        'C': "\u010A", 'E': "\u0116", 'G': "\u0120", 'Z': "\u017B"
    };
    this.VKI_deadkey['\u00B8'] = this.VKI_deadkey['\u201a'] = { // Cedilla
        'c': "\u00e7", 's': "\u015F",
        'C': "\u00c7", 'S': "\u015E"
    };
    this.VKI_deadkey[','] = { // Comma
        's': (this.VKI_isIElt8) ? "\u015F" : "\u0219", 't': (this.VKI_isIElt8) ? "\u0163" : "\u021B",
        'S': (this.VKI_isIElt8) ? "\u015E" : "\u0218", 'T': (this.VKI_isIElt8) ? "\u0162" : "\u021A"
    };
    this.VKI_deadkey['\u3002'] = { // Hiragana/Katakana Point
        '\u306f': "\u3071", '\u3072': "\u3074", '\u3075': "\u3077", '\u3078': "\u307a", '\u307b': "\u307d",
        '\u30cf': "\u30d1", '\u30d2': "\u30d4", '\u30d5': "\u30d7", '\u30d8': "\u30da", '\u30db': "\u30dd"
    };


    /* ***** Define Symbols **************************************** */
    this.VKI_symbol = {
        '\u00a0': "NB\nSP", '\u200b': "ZW\nSP", '\u200c': "ZW\nNJ", '\u200d': "ZW\nJ"
    };


    /* ***** Layout Number Pad ************************************* */
    this.VKI_numpad = [
      [["$"], ["\u00a3"], ["\u20ac"], ["\u00a5"]],
      [["7"], ["8"], ["9"], ["/"]],
      [["4"], ["5"], ["6"], ["*"]],
      [["1"], ["2"], ["3"], ["-"]],
      [["0"], ["."], ["="], ["+"]]
    ];


    /* ****************************************************************
     * Attach the keyboard to an element
     *
     */
    VKI_attach = function (elem) {
        if (elem.getAttribute("VKI_attached")) return false;
        if (self.VKI_imageURI) {
            var keybut = document.createElement('img');
            keybut.src = self.VKI_imageURI;
            keybut.alt = self.VKI_i18n['01'];
            keybut.className = "keyboardInputInitiator";
            keybut.title = self.VKI_i18n['01'];
            keybut.elem = elem;
            keybut.onclick = function (e) {
                e = e || event;
                if (e.stopPropagation) { e.stopPropagation(); } else e.cancelBubble = true;
                self.VKI_show(this.elem);
            };
            elem.parentNode.insertBefore(keybut,elem);
        } else {
            elem.onfocus = function () {
                if (self.VKI_target != this) {
                    if (self.VKI_target) self.VKI_close();
                    self.VKI_show(this);
                }
            };
            elem.onclick = function () {
                if (!self.VKI_target) self.VKI_show(this);
            }
        }
        elem.setAttribute("VKI_attached", 'true');
        if (self.VKI_isIE) {
            elem.onclick = elem.onselect = elem.onkeyup = function (e) {
                if ((e || event).type != "keyup" || !this.readOnly)
                    this.range = document.selection.createRange();
            };
        }
        VKI_addListener(elem, 'click', function (e) {
            if (self.VKI_target == this) {
                e = e || event;
                if (e.stopPropagation) { e.stopPropagation(); } else e.cancelBubble = true;
            } return false;
        }, false);
        if (self.VKI_isMoz)
            elem.addEventListener('blur', function () { this.setAttribute('_scrollTop', this.scrollTop); }, false);
    };


    /* ***** Find tagged input & textarea elements ***************** */
    function VKI_buildKeyboardInputs() {
        var inputElems = [
          document.getElementsByTagName('input'),
          document.getElementsByTagName('textarea'),
        ];
        for (var x = 0, elem; elem = inputElems[x++];)
            for (var y = 0, ex; ex = elem[y++];)
                if (ex.nodeName == "TEXTAREA" || ex.type == "text" || ex.type == "password")
                    if (ex.className.indexOf("keyboardInput") > -1) VKI_attach(ex);

        VKI_addListener(document.documentElement, 'click', function (e) { self.VKI_close(); }, false);
    }


    /* ****************************************************************
     * Common mouse event actions
     *
     */
    function VKI_mouseEvents(elem) {
        if (elem.nodeName == "TD") {
            if (!elem.click) elem.click = function () {
                var evt = this.ownerDocument.createEvent('MouseEvents');
                evt.initMouseEvent('click', true, true, this.ownerDocument.defaultView, 1, 0, 0, 0, 0, false, false, false, false, 0, null);
                this.dispatchEvent(evt);
            };
            elem.VKI_clickless = 0;
            VKI_addListener(elem, 'dblclick', function () { return false; }, false);
        }
        VKI_addListener(elem, 'mouseover', function () {
            if (this.nodeName == "TD" && self.VKI_clickless) {
                var _self = this;
                clearTimeout(this.VKI_clickless);
                this.VKI_clickless = setTimeout(function () { _self.click(); }, self.VKI_clickless);
            }
            if (self.VKI_isIE) this.className += " hover";
        }, false);
        VKI_addListener(elem, 'mouseout', function () {
            if (this.nodeName == "TD") clearTimeout(this.VKI_clickless);
            if (self.VKI_isIE) this.className = this.className.replace(/ ?(hover|pressed) ?/g, "");
        }, false);
        VKI_addListener(elem, 'mousedown', function () {
            if (this.nodeName == "TD") clearTimeout(this.VKI_clickless);
            if (self.VKI_isIE) this.className += " pressed";
        }, false);
        VKI_addListener(elem, 'mouseup', function () {
            if (this.nodeName == "TD") clearTimeout(this.VKI_clickless);
            if (self.VKI_isIE) this.className = this.className.replace(/ ?pressed ?/g, "");
        }, false);
    }


    /* ***** Build the keyboard interface ************************** */
    this.VKI_keyboard = document.createElement('table');
    this.VKI_keyboard.id = "keyboardInputMaster";
    this.VKI_keyboard.dir = "ltr";
    this.VKI_keyboard.cellSpacing = "0";
    this.VKI_keyboard.reflow = function () {
        this.style.width = "50px";
        var foo = this.offsetWidth;
        this.style.width = "";
    };
    VKI_addListener(this.VKI_keyboard, 'click', function (e) {
        e = e || event;
        if (e.stopPropagation) { e.stopPropagation(); } else e.cancelBubble = true;
        return false;
    }, false);

    if (!this.VKI_layout[this.VKI_kt])
        return alert('No keyboard named "' + this.VKI_kt + '"');

    this.VKI_langCode = {};
    var thead = document.createElement('thead');
    var tr = document.createElement('tr');
    var th = document.createElement('th');
    th.colSpan = "2";

    var kbSelect = document.createElement('div');
    kbSelect.title = this.VKI_i18n['02'];
    VKI_addListener(kbSelect, 'click', function () {
        var ol = this.getElementsByTagName('ol')[0];
        if (!ol.style.display) {
            ol.style.display = "block";
            var li = ol.getElementsByTagName('li');
            for (var x = 0, scr = 0; x < li.length; x++) {
                if (VKI_kt == li[x].firstChild.nodeValue) {
                    li[x].className = "selected";
                    scr = li[x].offsetTop - li[x].offsetHeight * 2;
                } else li[x].className = "";
            } setTimeout(function () { ol.scrollTop = scr; }, 0);
        } else ol.style.display = "";
    }, false);
    kbSelect.appendChild(document.createTextNode(this.VKI_kt));
    kbSelect.appendChild(document.createTextNode(this.VKI_isIElt8 ? " \u2193" : " \u25be"));
    kbSelect.langCount = 0;
    var ol = document.createElement('ol');
    for (ktype in this.VKI_layout) {
        if (typeof this.VKI_layout[ktype] == "object") {
            if (!this.VKI_layout[ktype].lang) this.VKI_layout[ktype].lang = [];
            for (var x = 0; x < this.VKI_layout[ktype].lang.length; x++)
                this.VKI_langCode[this.VKI_layout[ktype].lang[x].toLowerCase().replace(/-/g, "_")] = ktype;
            var li = document.createElement('li');
            li.title = this.VKI_layout[ktype].name;
            VKI_addListener(li, 'click', function (e) {
                e = e || event;
                if (e.stopPropagation) { e.stopPropagation(); } else e.cancelBubble = true;
                this.parentNode.style.display = "";
                self.VKI_kts = self.VKI_kt = kbSelect.firstChild.nodeValue = this.firstChild.nodeValue;
                self.VKI_buildKeys();
                self.VKI_position(true);
            }, false);
            VKI_mouseEvents(li);
            li.appendChild(document.createTextNode(ktype));
            ol.appendChild(li);
            kbSelect.langCount++;
        }
    } kbSelect.appendChild(ol);
    if (kbSelect.langCount > 1) th.appendChild(kbSelect);
    this.VKI_langCode.index = [];
    for (prop in this.VKI_langCode)
        if (prop != "index" && typeof this.VKI_langCode[prop] == "string")
            this.VKI_langCode.index.push(prop);
    this.VKI_langCode.index.sort();
    this.VKI_langCode.index.reverse();

    if (this.VKI_numberPad) {
        var span = document.createElement('span');
        span.appendChild(document.createTextNode("#"));
        span.title = this.VKI_i18n['00'];
        VKI_addListener(span, 'click', function () {
            kbNumpad.style.display = (!kbNumpad.style.display) ? "none" : "";
            self.VKI_position(true);
        }, false);
        VKI_mouseEvents(span);
        th.appendChild(span);
    }

    this.VKI_kbsize = function (e) {
        self.VKI_size = Math.min(5, Math.max(1, self.VKI_size));
        self.VKI_keyboard.className = self.VKI_keyboard.className.replace(/ ?keyboardInputSize\d ?/, "");
        if (self.VKI_size != 2) self.VKI_keyboard.className += " keyboardInputSize" + self.VKI_size;
        self.VKI_position(true);
        if (self.VKI_isOpera) self.VKI_keyboard.reflow();
    };
    if (this.VKI_sizeAdj) {
        var small = document.createElement('small');
        small.title = this.VKI_i18n['10'];
        VKI_addListener(small, 'click', function () {
            --self.VKI_size;
            self.VKI_kbsize();
        }, false);
        VKI_mouseEvents(small);
        small.appendChild(document.createTextNode(this.VKI_isIElt8 ? "\u2193" : "\u21d3"));
        th.appendChild(small);
        var big = document.createElement('big');
        big.title = this.VKI_i18n['11'];
        VKI_addListener(big, 'click', function () {
            ++self.VKI_size;
            self.VKI_kbsize();
        }, false);
        VKI_mouseEvents(big);
        big.appendChild(document.createTextNode(this.VKI_isIElt8 ? "\u2191" : "\u21d1"));
        th.appendChild(big);
    }

    var span = document.createElement('span');
    span.appendChild(document.createTextNode(this.VKI_i18n['07']));
    span.title = this.VKI_i18n['08'];
    VKI_addListener(span, 'click', function () {
        self.VKI_target.value = "";
        self.VKI_target.focus();
        return false;
    }, false);
    VKI_mouseEvents(span);
    th.appendChild(span);

    var strong = document.createElement('strong');
    strong.appendChild(document.createTextNode('X'));
    strong.title = this.VKI_i18n['06'];
    VKI_addListener(strong, 'click', function () { self.VKI_close(); }, false);
    VKI_mouseEvents(strong);
    th.appendChild(strong);

    tr.appendChild(th);
    thead.appendChild(tr);
    this.VKI_keyboard.appendChild(thead);

    var tbody = document.createElement('tbody');
    var tr = document.createElement('tr');
    var td = document.createElement('td');
    var div = document.createElement('div');

    if (this.VKI_deadBox) {
        var label = document.createElement('label');
        var checkbox = document.createElement('input');
        checkbox.type = "checkbox";
        checkbox.title = this.VKI_i18n['03'] + ": " + ((this.VKI_deadkeysOn) ? this.VKI_i18n['04'] : this.VKI_i18n['05']);
        checkbox.defaultChecked = this.VKI_deadkeysOn;
        VKI_addListener(checkbox, 'click', function () {
            this.title = self.VKI_i18n['03'] + ": " + ((this.checked) ? self.VKI_i18n['04'] : self.VKI_i18n['05']);
            self.VKI_modify("");
            return true;
        }, false);
        label.appendChild(checkbox);
        checkbox.checked = this.VKI_deadkeysOn;
        div.appendChild(label);
        this.VKI_deadkeysOn = checkbox;
    } else this.VKI_deadkeysOn.checked = this.VKI_deadkeysOn;

    if (this.VKI_showVersion) {
        var vr = document.createElement('var');
        vr.title = this.VKI_i18n['09'] + " " + this.VKI_version;
        vr.appendChild(document.createTextNode("v" + this.VKI_version));
        div.appendChild(vr);
    } td.appendChild(div);
    tr.appendChild(td);

    var kbNumpad = document.createElement('td');
    kbNumpad.id = "keyboardInputNumpad";
    if (!this.VKI_numberPadOn) kbNumpad.style.display = "none";
    var ntable = document.createElement('table');
    ntable.cellSpacing = "0";
    var ntbody = document.createElement('tbody');
    for (var x = 0; x < this.VKI_numpad.length; x++) {
        var ntr = document.createElement('tr');
        for (var y = 0; y < this.VKI_numpad[x].length; y++) {
            var ntd = document.createElement('td');
            VKI_addListener(ntd, 'click', VKI_keyClick, false);
            VKI_mouseEvents(ntd);
            ntd.appendChild(document.createTextNode(this.VKI_numpad[x][y]));
            ntr.appendChild(ntd);
        } ntbody.appendChild(ntr);
    } ntable.appendChild(ntbody);
    kbNumpad.appendChild(ntable);
    tr.appendChild(kbNumpad);
    tbody.appendChild(tr);
    this.VKI_keyboard.appendChild(tbody);

    if (this.VKI_isIE6) {
        this.VKI_iframe = document.createElement('iframe');
        this.VKI_iframe.style.position = "absolute";
        this.VKI_iframe.style.border = "0px none";
        this.VKI_iframe.style.filter = "mask()";
        this.VKI_iframe.style.zIndex = "999999";
        this.VKI_iframe.src = this.VKI_imageURI;
    }


    /* ****************************************************************
     * Private table cell attachment function for generic characters
     *
     */
    function VKI_keyClick() {
        var done = false, character = "\xa0";
        if (this.firstChild.nodeName.toLowerCase() != "small") {
            if ((character = this.firstChild.nodeValue) == "\xa0") return false;
        } else character = this.firstChild.getAttribute('char');
        if (self.VKI_deadkeysOn.checked && self.VKI_dead) {
            if (self.VKI_dead != character) {
                if (character != " ") {
                    if (self.VKI_deadkey[self.VKI_dead][character]) {
                        self.VKI_insert(self.VKI_deadkey[self.VKI_dead][character]);
                        done = true;
                    }
                } else {
                    self.VKI_insert(self.VKI_dead);
                    done = true;
                }
            } else done = true;
        } self.VKI_dead = false;

        if (!done) {
            if (self.VKI_deadkeysOn.checked && self.VKI_deadkey[character]) {
                self.VKI_dead = character;
                this.className += " dead";
                if (self.VKI_shift) self.VKI_modify("Shift");
                if (self.VKI_altgr) self.VKI_modify("AltGr");
            } else self.VKI_insert(character);
        } self.VKI_modify("");
        return false;
    }


    /* ****************************************************************
     * Build or rebuild the keyboard keys
     *
     */
    this.VKI_buildKeys = function () {
        this.VKI_shift = this.VKI_shiftlock = this.VKI_altgr = this.VKI_altgrlock = this.VKI_dead = false;
        var container = this.VKI_keyboard.tBodies[0].getElementsByTagName('div')[0];
        var tables = container.getElementsByTagName('table');
        for (var x = tables.length - 1; x >= 0; x--) container.removeChild(tables[x]);

        for (var x = 0, hasDeadKey = false, lyt; lyt = this.VKI_layout[this.VKI_kt].keys[x++];) {
            var table = document.createElement('table');
            table.cellSpacing = "0";
            if (lyt.length <= this.VKI_keyCenter) table.className = "keyboardInputCenter";
            var tbody = document.createElement('tbody');
            var tr = document.createElement('tr');
            for (var y = 0, lkey; lkey = lyt[y++];) {
                var td = document.createElement('td');
                if (this.VKI_symbol[lkey[0]]) {
                    var text = this.VKI_symbol[lkey[0]].split("\n");
                    var small = document.createElement('small');
                    small.setAttribute('char', lkey[0]);
                    for (var z = 0; z < text.length; z++) {
                        if (z) small.appendChild(document.createElement("br"));
                        small.appendChild(document.createTextNode(text[z]));
                    } td.appendChild(small);
                } else td.appendChild(document.createTextNode(lkey[0] || "\xa0"));

                var className = [];
                if (this.VKI_deadkeysOn.checked)
                    for (key in this.VKI_deadkey)
                        if (key === lkey[0]) { className.push("deadkey"); break; }
                if (lyt.length > this.VKI_keyCenter && y == lyt.length) className.push("last");
                if (lkey[0] == " " || lkey[1] == " ") className.push("space");
                td.className = className.join(" ");

                switch (lkey[1]) {
                    case "Caps": case "Shift":
                    case "Alt": case "AltGr": case "AltLk":
                        VKI_addListener(td, 'click', (function (type) { return function () { self.VKI_modify(type); return false; } })(lkey[1]), false);
                        break;
                    case "Tab":
                        VKI_addListener(td, 'click', function () {
                            if (self.VKI_activeTab) {
                                if (self.VKI_target.form) {
                                    var target = self.VKI_target, elems = target.form.elements;
                                    self.VKI_close();
                                    for (var z = 0, me = false, j = -1; z < elems.length; z++) {
                                        if (j == -1 && elems[z].getAttribute("VKI_attached")) j = z;
                                        if (me) {
                                            if (self.VKI_activeTab == 1 && elems[z]) break;
                                            if (elems[z].getAttribute("VKI_attached")) break;
                                        } else if (elems[z] == target) me = true;
                                    } if (z == elems.length) z = Math.max(j, 0);
                                    if (elems[z].getAttribute("VKI_attached")) {
                                        self.VKI_show(elems[z]);
                                    } else elems[z].focus();
                                } else self.VKI_target.focus();
                            } else self.VKI_insert("\t");
                            return false;
                        }, false);
                        break;
                    case "Bksp":
                        VKI_addListener(td, 'click', function () {
                            self.VKI_target.focus();
                            if (self.VKI_target.setSelectionRange && !self.VKI_target.readOnly) {
                                var rng = [self.VKI_target.selectionStart, self.VKI_target.selectionEnd];
                                if (rng[0] < rng[1]) rng[0]++;
                                self.VKI_target.value = self.VKI_target.value.substr(0, rng[0] - 1) + self.VKI_target.value.substr(rng[1]);
                                self.VKI_target.setSelectionRange(rng[0] - 1, rng[0] - 1);
                            } else if (self.VKI_target.createTextRange && !self.VKI_target.readOnly) {
                                try {
                                    self.VKI_target.range.select();
                                } catch (e) { self.VKI_target.range = document.selection.createRange(); }
                                if (!self.VKI_target.range.text.length) self.VKI_target.range.moveStart('character', -1);
                                self.VKI_target.range.text = "";
                            } else self.VKI_target.value = self.VKI_target.value.substr(0, self.VKI_target.value.length - 1);
                            if (self.VKI_shift) self.VKI_modify("Shift");
                            if (self.VKI_altgr) self.VKI_modify("AltGr");
                            self.VKI_target.focus();
                            return true;
                        }, false);
                        break;
                    case "Enter":
                        VKI_addListener(td, 'click', function () {
                            if (self.VKI_target.nodeName != "TEXTAREA") {
                                if (self.VKI_enterSubmit && self.VKI_target.form) {
                                    for (var z = 0, subm = false; z < self.VKI_target.form.elements.length; z++)
                                        if (self.VKI_target.form.elements[z].type == "submit") subm = true;
                                    if (!subm) self.VKI_target.form.submit();
                                }
                                self.VKI_close();
                            } else self.VKI_insert("\n");
                            return true;
                        }, false);
                        break;
                    default:
                        VKI_addListener(td, 'click', VKI_keyClick, false);

                } VKI_mouseEvents(td);
                tr.appendChild(td);
                for (var z = 0; z < 4; z++)
                    if (this.VKI_deadkey[lkey[z] = lkey[z] || ""]) hasDeadKey = true;
            } tbody.appendChild(tr);
            table.appendChild(tbody);
            container.appendChild(table);
        }
        if (this.VKI_deadBox)
            this.VKI_deadkeysOn.style.display = (hasDeadKey) ? "inline" : "none";
        if (this.VKI_isIE6) {
            this.VKI_iframe.style.width = this.VKI_keyboard.offsetWidth + "px";
            this.VKI_iframe.style.height = this.VKI_keyboard.offsetHeight + "px";
        }
    };

    this.VKI_buildKeys();
    VKI_addListener(this.VKI_keyboard, 'selectstart', function () { return false; }, false);
    this.VKI_keyboard.unselectable = "on";
    if (this.VKI_isOpera)
        VKI_addListener(this.VKI_keyboard, 'mousedown', function () { return false; }, false);


    /* ****************************************************************
     * Controls modifier keys
     *
     */
    this.VKI_modify = function (type) {
        switch (type) {
            case "Alt":
            case "AltGr": this.VKI_altgr = !this.VKI_altgr; break;
            case "AltLk": this.VKI_altgr = 0; this.VKI_altgrlock = !this.VKI_altgrlock; break;
            case "Caps": this.VKI_shift = 0; this.VKI_shiftlock = !this.VKI_shiftlock; break;
            case "Shift": this.VKI_shift = !this.VKI_shift; break;
        } var vchar = 0;
        if (!this.VKI_shift != !this.VKI_shiftlock) vchar += 1;
        if (!this.VKI_altgr != !this.VKI_altgrlock) vchar += 2;

        var tables = this.VKI_keyboard.tBodies[0].getElementsByTagName('div')[0].getElementsByTagName('table');
        for (var x = 0; x < tables.length; x++) {
            var tds = tables[x].getElementsByTagName('td');
            for (var y = 0; y < tds.length; y++) {
                var className = [], lkey = this.VKI_layout[this.VKI_kt].keys[x][y];

                switch (lkey[1]) {
                    case "Alt":
                    case "AltGr":
                        if (this.VKI_altgr) className.push("pressed");
                        break;
                    case "AltLk":
                        if (this.VKI_altgrlock) className.push("pressed");
                        break;
                    case "Shift":
                        if (this.VKI_shift) className.push("pressed");
                        break;
                    case "Caps":
                        if (this.VKI_shiftlock) className.push("pressed");
                        break;
                    case "Tab": case "Enter": case "Bksp": break;
                    default:
                        if (type) {
                            tds[y].removeChild(tds[y].firstChild);
                            if (this.VKI_symbol[lkey[vchar]]) {
                                var text = this.VKI_symbol[lkey[vchar]].split("\n");
                                var small = document.createElement('small');
                                small.setAttribute('char', lkey[vchar]);
                                for (var z = 0; z < text.length; z++) {
                                    if (z) small.appendChild(document.createElement("br"));
                                    small.appendChild(document.createTextNode(text[z]));
                                } tds[y].appendChild(small);
                            } else tds[y].appendChild(document.createTextNode(lkey[vchar] || "\xa0"));
                        }
                        if (this.VKI_deadkeysOn.checked) {
                            var character = tds[y].firstChild.nodeValue || tds[y].firstChild.className;
                            if (this.VKI_dead) {
                                if (character == this.VKI_dead) className.push("pressed");
                                if (this.VKI_deadkey[this.VKI_dead][character]) className.push("target");
                            }
                            if (this.VKI_deadkey[character]) className.push("deadkey");
                        }
                }

                if (y == tds.length - 1 && tds.length > this.VKI_keyCenter) className.push("last");
                if (lkey[0] == " " || lkey[1] == " ") className.push("space");
                tds[y].className = className.join(" ");
            }
        }
    };


    /* ****************************************************************
     * Insert text at the cursor
     *
     */
    this.VKI_insert = function (text) {
        this.VKI_target.focus();
        if (this.VKI_target.maxLength) this.VKI_target.maxlength = this.VKI_target.maxLength;
        if (typeof this.VKI_target.maxlength == "undefined" ||
            this.VKI_target.maxlength < 0 ||
            this.VKI_target.value.length < this.VKI_target.maxlength) {
            if (this.VKI_target.setSelectionRange && !this.VKI_target.readOnly && !this.VKI_isIE) {
                var rng = [this.VKI_target.selectionStart, this.VKI_target.selectionEnd];
                this.VKI_target.value = this.VKI_target.value.substr(0, rng[0]) + text + this.VKI_target.value.substr(rng[1]);
                if (text == "\n" && this.VKI_isOpera) rng[0]++;
                this.VKI_target.setSelectionRange(rng[0] + text.length, rng[0] + text.length);
            } else if (this.VKI_target.createTextRange && !this.VKI_target.readOnly) {
                try {
                    this.VKI_target.range.select();
                } catch (e) { this.VKI_target.range = document.selection.createRange(); }
                this.VKI_target.range.text = text;
                this.VKI_target.range.collapse(true);
                this.VKI_target.range.select();
            } else this.VKI_target.value += text;
            if (this.VKI_shift) this.VKI_modify("Shift");
            if (this.VKI_altgr) this.VKI_modify("AltGr");
            this.VKI_target.focus();
        } else if (this.VKI_target.createTextRange && this.VKI_target.range)
            this.VKI_target.range.select();
    };


    /* ****************************************************************
     * Show the keyboard interface
     *
     */
    this.VKI_show = function (elem) {
        if (!this.VKI_target) {
            this.VKI_target = elem;
            if (this.VKI_langAdapt && this.VKI_target.lang) {
                var chg = false, sub = [], lang = this.VKI_target.lang.toLowerCase().replace(/-/g, "_");
                for (var x = 0, chg = false; !chg && x < this.VKI_langCode.index.length; x++)
                    if (lang.indexOf(this.VKI_langCode.index[x]) == 0)
                        chg = kbSelect.firstChild.nodeValue = this.VKI_kt = this.VKI_langCode[this.VKI_langCode.index[x]];
                if (chg) this.VKI_buildKeys();
            }
            if (this.VKI_isIE) {
                if (!this.VKI_target.range) {
                    this.VKI_target.range = this.VKI_target.createTextRange();
                    this.VKI_target.range.moveStart('character', this.VKI_target.value.length);
                } this.VKI_target.range.select();
            }
            try { this.VKI_keyboard.parentNode.removeChild(this.VKI_keyboard); } catch (e) { }
            if (this.VKI_clearPasswords && this.VKI_target.type == "password") this.VKI_target.value = "";

            var elem = this.VKI_target;
            this.VKI_target.keyboardPosition = "absolute";
            do {
                if (VKI_getStyle(elem, "position") == "fixed") {
                    this.VKI_target.keyboardPosition = "fixed";
                    break;
                }
            } while (elem = elem.offsetParent);

            if (this.VKI_isIE6) document.body.appendChild(this.VKI_iframe);
            document.body.appendChild(this.VKI_keyboard);
            this.VKI_keyboard.style.position = this.VKI_target.keyboardPosition;
            if (this.VKI_isOpera) this.VKI_keyboard.reflow();

            this.VKI_position(true);
            if (self.VKI_isMoz || self.VKI_isWebKit) this.VKI_position(true);
            this.VKI_target.blur();
            this.VKI_target.focus();
        } else this.VKI_close();
    };


    /* ****************************************************************
     * Position the keyboard
     *
     */
    this.VKI_position = function (force) {
        if (self.VKI_target) {
            var kPos = VKI_findPos(self.VKI_keyboard), wDim = VKI_innerDimensions(), sDis = VKI_scrollDist();
            var place = false, fudge = self.VKI_target.offsetHeight + 3;
            if (force !== true) {
                if (kPos[1] + self.VKI_keyboard.offsetHeight - sDis[1] - wDim[1] > 0) {
                    place = true;
                    fudge = -self.VKI_keyboard.offsetHeight - 3;
                } else if (kPos[1] - sDis[1] < 0) place = true;
            }
            if (place || force === true) {
                var iPos = VKI_findPos(self.VKI_target), scr = self.VKI_target;
                while (scr = scr.parentNode) {
                    if (scr == document.body) break;
                    if (scr.scrollHeight > scr.offsetHeight || scr.scrollWidth > scr.offsetWidth) {
                        if (!scr.getAttribute("VKI_scrollListener")) {
                            scr.setAttribute("VKI_scrollListener", true);
                            VKI_addListener(scr, 'scroll', function () { self.VKI_position(true); }, false);
                        } // Check if the input is in view
                        var pPos = VKI_findPos(scr), oTop = iPos[1] - pPos[1], oLeft = iPos[0] - pPos[0];
                        var top = oTop + self.VKI_target.offsetHeight;
                        var left = oLeft + self.VKI_target.offsetWidth;
                        var bottom = scr.offsetHeight - oTop - self.VKI_target.offsetHeight;
                        var right = scr.offsetWidth - oLeft - self.VKI_target.offsetWidth;
                        self.VKI_keyboard.style.display = (top < 0 || left < 0 || bottom < 0 || right < 0) ? "none" : "";
                        if (self.VKI_isIE6) self.VKI_iframe.style.display = (top < 0 || left < 0 || bottom < 0 || right < 0) ? "none" : "";
                    }
                }
                self.VKI_keyboard.style.top = iPos[1] - ((self.VKI_target.keyboardPosition == "fixed" && !self.VKI_isIE && !self.VKI_isMoz) ? sDis[1] : 0) + fudge + "px";
                self.VKI_keyboard.style.left = Math.max(10, Math.min(wDim[0] - self.VKI_keyboard.offsetWidth - 25, iPos[0])) + "px";
                if (self.VKI_isIE6) {
                    self.VKI_iframe.style.width = self.VKI_keyboard.offsetWidth + "px";
                    self.VKI_iframe.style.height = self.VKI_keyboard.offsetHeight + "px";
                    self.VKI_iframe.style.top = self.VKI_keyboard.style.top;
                    self.VKI_iframe.style.left = self.VKI_keyboard.style.left;
                }
            }
            if (force === true) self.VKI_position();
        }
    };


    /* ****************************************************************
     * Close the keyboard interface
     *
     */
    this.VKI_close = VKI_close = function () {
        if (this.VKI_target) {
            try {
                this.VKI_keyboard.parentNode.removeChild(this.VKI_keyboard);
                if (this.VKI_isIE6) this.VKI_iframe.parentNode.removeChild(this.VKI_iframe);
            } catch (e) { }
            if (this.VKI_kt != this.VKI_kts) {
                kbSelect.firstChild.nodeValue = this.VKI_kt = this.VKI_kts;
                this.VKI_buildKeys();
            } kbSelect.getElementsByTagName('ol')[0].style.display = "";;
            this.VKI_target.focus();
            if (this.VKI_isIE) {
                setTimeout(function () { self.VKI_target = false; }, 0);
            } else this.VKI_target = false;
        }
    };


    /* ***** Private functions *************************************** */
    function VKI_addListener(elem, type, func, cap) {
        if (elem.addEventListener) {
            elem.addEventListener(type, function (e) { func.call(elem, e); }, cap);
        } else if (elem.attachEvent)
            elem.attachEvent('on' + type, function () { func.call(elem); });
    }

    function VKI_findPos(obj) {
        var curleft = curtop = 0, scr = obj;
        while ((scr = scr.parentNode) && scr != document.body) {
            curleft -= scr.scrollLeft || 0;
            curtop -= scr.scrollTop || 0;
        }
        do {
            curleft += obj.offsetLeft;
            curtop += obj.offsetTop;
        } while (obj = obj.offsetParent);
        return [curleft, curtop];
    }

    function VKI_innerDimensions() {
        if (self.innerHeight) {
            return [self.innerWidth, self.innerHeight];
        } else if (document.documentElement && document.documentElement.clientHeight) {
            return [document.documentElement.clientWidth, document.documentElement.clientHeight];
        } else if (document.body)
            return [document.body.clientWidth, document.body.clientHeight];
        return [0, 0];
    }

    function VKI_scrollDist() {
        var html = document.getElementsByTagName('html')[0];
        if (html.scrollTop && document.documentElement.scrollTop) {
            return [html.scrollLeft, html.scrollTop];
        } else if (html.scrollTop || document.documentElement.scrollTop) {
            return [html.scrollLeft + document.documentElement.scrollLeft, html.scrollTop + document.documentElement.scrollTop];
        } else if (document.body.scrollTop)
            return [document.body.scrollLeft, document.body.scrollTop];
        return [0, 0];
    }

    function VKI_getStyle(obj, styleProp) {
        if (obj.currentStyle) {
            var y = obj.currentStyle[styleProp];
        } else if (window.getComputedStyle)
            var y = window.getComputedStyle(obj, null)[styleProp];
        return y;
    }


    VKI_addListener(window, 'resize', this.VKI_position, false);
    VKI_addListener(window, 'scroll', this.VKI_position, false);
    this.VKI_kbsize();
    VKI_addListener(window, 'load', VKI_buildKeyboardInputs, false);
    // VKI_addListener(window, 'load', function() {
    //   setTimeout(VKI_buildKeyboardInputs, 5);
    // }, false);
})();;
var BootstrapModal = (function() {
    "use strict";
    var show = function(markupSelector, title) {
        $(markupSelector + " .modal-content").css({ 'top': "", 'left': "" });

        if (title) {
            $(markupSelector + " " + ".modal-title").text(title);
        }

        //$(markupSelector).modal('show');
        $(markupSelector)
            .modal({
                show: true,
                keyboard: false,
                backdrop: "static"
            });

        //$(markupSelector + " .modal-content").draggable({
        //    //start: function (event, ui) {
        //    //    $('.modal-header').css({ 'cursor': 'move' });
        //    //},
        //    //stop: function (event, ui) {
        //    //    $('.modal-header').css({ 'cursor': '' });
        //    //}
        //    cursor: "move"
        //});
    };

    var createAndShow = function(modalElementId, modalTitle, modalBodyMarkup, events) {
        var args = arguments.length === 1 ? arguments[0] : {};
        args.modalElementId = arguments.length === 1 ? args.modalElementId : modalElementId;
        modalElementId = args.modalElementId || "modal" + Common.getRandomString(5);

        var modalMarkup = "";
        modalMarkup = modalMarkup + "<div id=\"%ModalId%\" class=\"modal fade\">";
        modalMarkup = modalMarkup + "<div class=\"modal-dialog \" >\"";
        modalMarkup = modalMarkup + "<div class=\"modal-content\" style=\"width:%Width%\">";
        modalMarkup = modalMarkup + "<div class=\"modal-header\">";
        modalMarkup = modalMarkup +
            "<button type=\"button\" class=\"close pull-left\" data-dismiss=\"modal\" aria-label=\"Close\">";
        modalMarkup = modalMarkup + "<span aria-hidden=\"true\">&times;</span></button>";
        modalMarkup = modalMarkup + "<h4 class=\"modal-title pull-right\">%ModalTitle%</h4>";
        modalMarkup = modalMarkup + "</div>";
        modalMarkup = modalMarkup + "<div class=\"modal-body\" style=\"height:%Height%\">%ModalBodyMarkup%</div>";
        //modalMarkup = modalMarkup + "<div class=\"modal-footer\">";
        //modalMarkup = modalMarkup + "<button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">Close</button>";
        //modalMarkup = modalMarkup + "<button type=\"button\" class=\"btn btn-primary\">Save changes</button>";
        //modalMarkup = modalMarkup + "</div>";
        modalMarkup = modalMarkup + "</div></div></div>";


        var replacements = {
            "%ModalId%": modalElementId,
            "%ModalTitle%": args.modalTitle || modalTitle || "",
            "%ModalBodyMarkup%": args.modalBodyMarkup || modalBodyMarkup || "",
            "%Width%": args.width ? args.width + "px" : null,
            "%Height%": args.height ? args.height + "px" : null
        };
        modalMarkup = modalMarkup.replace(/%\w+%/g,
            function(all) {
                return replacements[all];
            });

        $("body").append(modalMarkup);

        var $modal = $("#" + modalElementId);

        $modal.find(".modal-content").css({ 'top': "", 'left': "" });

        //if (modalBodyMarkup.length > 0) {
        //    $modal.find(".modal-body").html(modalBodyMarkup);
        //}

        BootstrapModal.bindModalEvents($modal, args.events || events);

        $modal.modal({
            show: true,
            keyboard: false,
            backdrop: "static"
        });


        ////To make the modal draggable
        //$modal.find(".modal-content").draggable({
        //    cursor: "move",
        //    handle: ".modal-header",
        //    containment: "#page-content-wrapper"
        //});

        ////Should be  moved to external CSS file
        //$(".ui-draggable-handle").css({
        //    "cursor": "move"
        //});


        return $modal;
    };

    var hide = function(markupSelector) {
        $(markupSelector).modal("hide");
    };

    var bindModalEvents = function($modal, events) {
        //Events from Caller
        if (events && Object.keys(events).length > 0) {
            if (events.onShow) {
                $modal.on("show.bs.modal",
                    function() {
                        events.onShow();
                    });
            }

            if (events.onShown) {
                $modal.on("shown.bs.modal",
                    function() {
                        events.onShown();
                    });
            }


            if (events.onHide) {
                $modal.on("hide.bs.modal",
                    function() {
                        events.onHide();
                    });
            }

            if (events.onLoaded) {
                $modal.on("loaded.bs.modal",
                    function() {
                        events.onLoaded();
                    });
            }

            if (events.onHidden) {
                $modal.on("hidden.bs.modal",
                    function() {
                        events.onHidden();
                    });
            }
        }

        //Events from Component
        $modal.on("hidden.bs.modal",
            function(e) {
                //destroy on Hide
                $modal.remove();
            });
    };

    return {
        createAndShow: createAndShow,
        show: show,
        hide: hide,
        bindModalEvents: bindModalEvents
    };
})();;
